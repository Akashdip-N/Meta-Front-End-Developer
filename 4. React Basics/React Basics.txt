---------------------------------------------------------------------------------------------

                            React Basics notes

---------------------------------------------------------------------------------------------
***************************************************************************************

                                    Week 1

***************************************************************************************
---------------------------------------------------------------------------------------------
* React can be used to build single-page applications (SPAs) and mobile applications.
* Every react application has a root component.
---------------------------------------------------------------------------------------------
Functional Component:-
    * A function that returns a React element.
    * It can accept props as an argument.

    Ex:-
        function Welcome() {
            let greet = "Hello";
            return (<h1>{greet}</h1>);
        }

---------------------------------------------------------------------------------------------
Naming Conventions:-
    * Component names should start with a capital letter.
    * File names should match the component name.
    * Use PascalCase for component names and camelCase for props.

---------------------------------------------------------------------------------------------
Transpilling:-
    * The process of converting modern JavaScript (ES6+) code into a version that can run in older browsers.
    * Babel is a popular transpiler used in React applications.

---------------------------------------------------------------------------------------------
Folder Structure:-
    |-- node_modules                :- Dependencies and libraries installed via npm.
        |-- react
        |-- react-dom
    |-- public                      :- Static files that are served directly by the web server.
        |-- index.html              :- the main HTML file that loads the React application.
        |-- favicon.ico             :- which are used in the browser tab.
        |-- manifest.json           :- used for Progressive Web Apps (PWAs) to define the app's metadata.
        |-- robots.txt              :- used to control how search engines crawl the site.
    |-- src                         :- Componenets of the application, created via `npm create-app`
        |-- App.test.js             :- used for testing the App.js component.
        |-- App.css                 :- Contains the styles for the App.js component.
        |-- App.js                  :- The main component of the application.
        |-- index.js                :- ENTRY POINT OF THE APPLICATION, AND IS MOST IMPORTANT
        |-- index.css               :- Styles for the entire application.
        |-- logo.svg                :- The React logo used in the application.
        |-- reportWebVitals.js      :- used for testing and performance monitoring.
        |-- setupTests.js           :- used for setting up testing environment.
    |-- package.json                :- Contains metadata about the project and its dependencies.
    |-- package-lock.json           :- Contains the exact version of each dependency installed.
    |-- .gitignore                  :- Specifies files and directories to be ignored by Git.
    |-- README.md                   :- Documentation for the project.

---------------------------------------------------------------------------------------------
Steps in creating a react app:-
    a. using `npx create-react-app project-name` command.

        *** This command, creates a new react app with the name of the project. ***

        Steps:-
            i. Go to the folder inside which you want to create the react app.
            ii. open the terminal and navigate to the folder.
            iii. run the command `npx create-react-app project-name` to create a new react app.
            iv. navigate to the project folder using `cd project-name`.
            v. run the command `npm start` to start the development server.

    b. using `npm init react-app` command.

        *** This command, creates a new react app with the same name as of the folder ***

        Steps:-
            i. Create a folder with the name of the project, ex: `project-name`.
            ii. open the terminal and navigate to the folder,
                cd project-name
            iii. run the command `npm init react-app.` to create a new react app.
            iv. To start the development server, run the command `npm start`.

---------------------------------------------------------------------------------------------
Exports types & meaninigs:-
    i. Default exports:- This is used when the function name is same as the filename.
        Ex:-
            // default export

            export default App;

    ii. Named exports:- This is used when the function name is different from the filename.
        Ex:-
            // named export

            export { App };

---------------------------------------------------------------------------------------------
Import statements:-
    i. Default import:- This is used when the function name is same as the filename.
        Ex:-
            // default import

            import App from './App';

    ii. Named import:- This is used when the function name is different from the filename.
        Ex:-
            // named import

            import { App } from './App';

--------------------------------------------------------------------------------------------------
Return statement:-
    * The return statement is used to return a React element from a functional component.
    * The return statement must return a single React element.

    Ex:-
        function Welcome() {
            return (
                <div>
                    <h1>Hello</h1>
                    <h2>World</h2>
                </div>
            );
        }

        ---------------------------------------------
        This will create a div element with two child elements, h1 and h2.

    Ex:-
        // incorrect example
        function Welcome() {
            return (
                <h1>Hello</h1>
                <h2>World</h2>
            );
        }

        -----------------------------------------------
        This is incorrect because the return statement must return a single React element.

---------------------------------------------------------------------------------------------
Props:-
    * Props are used to pass data from one component to another.
    * Props are read-only and cannot be modified by the child component.
    * Props can be of any data type, including objects and arrays.
    * Props are passed to the component as an object.
    * (.) dot operator is used to access the properties of the props object.

    Ex:-
        function Welcome(props) {
            return (<h1>{props.greet}</h1>);
        }

        <Welcome greet="Hello" />

---------------------------------------------------------------------------------------------
Parent -> Child:-
    * The parent component can pass data to the child component using props.
    * The child component can access the props using `props` object.
    * This is a unidirectional data flow, meaning data can only flow from parent to child.

    Ex:-
        function Parent() {
            return (<Child greet="Hello" />);
        }

        function Child(props) {
            return (<h1>{props.greet}</h1>);
        }

    -------------------------------------------
    * The parent component can pass data to the child component using props.

---------------------------------------------------------------------------------------------
Props and children:-
    * The `children` prop is a special prop that is used to pass child elements to a component.
    * The `children` prop can be accessed using `props.children`.

    Ex:-
        function Parent(props) {
            const containerStyle = {
                border: "2px solid black",
                padding: "10px",
                margin: "10px"
            };

            return (
                <div style={containerStyle}>
                    {props.children}
                </div>
            );
        }
        ------------------------------------------
        This will pass the containerStyle as a prop from the Parent component to the Child component.

---------------------------------------------------------------------------------------------
Styling props:-
    i. Inline styling:-
        * Inline styles are defined using the `style` attribute.
        * The value of the `style` attribute is an object with camelCased properties.

        Ex:-
            a. Styling the attributes in the same line of the component.

                index.js
                ----------------------------
                <div className="container">
                    <h1 style={{ color: "red", fontSize: "20px" }}>{props.heading}
                    </h1>
                    <h2 style={{ color: "blue", fontSize: "15px" }}>{props.subheading}
                    </h2>
                </div>

            b. Styling the attributes in a separate object.

                index.js
                ----------------------------
                const headingStyle = {
                    color: "red",
                    fontSize: "20px"
                };

                const subheadingStyle = {
                    color: "blue",
                    fontSize: "15px"
                };

                <div className="container">
                    <h1 style={headingStyle}>{props.heading}</h1>
                    <h2 style={subheadingStyle}>{props.subheading}</h2>
                </div>

            --------------------------------------------------
            Both of the styles will create a h1 element with red text and a font size of 20px, and a h2 element with blue text and a font size of 15px.

        ii. External CSS:-
            * External CSS is defined in a separate CSS file and imported into the component.
            * The CSS file is imported using the `import` statement.

            Ex:-
                index.js
                ----------------------------
                <div className="container">
                    <h1>{props.heading}</h1>
                    <h2>{props.subheading}</h2>
                </div>

                styles.css
                ----------------------------
                #h1 {
                    color: red;
                    font-size: 20px;
                }

                #h2 {
                    color: blue;
                    font-size: 15px;
                }
                --------------------------------------------------
                This will create a h1 element with red text and a font size of 20px, and a h2 element with blue text and a font size of 15px.

---------------------------------------------------------------------------------------------
Arrow functions:-
    * These functions are used to create functional components.
    * Arrow functions are a shorter syntax for writing functions.

    Ex:-
        a. Function which accepts some parameters
            normal way of writing a function.
            -------------------------------------
            const Nav = function(props) {
                return (
                    <ul>
                        <li>{props.first}</li>
                    </ul>
                )
            }


            Arrow function way of writing a function.
            -------------------------------------
            const Nav = (props) => {
                return (
                    <ul>
                        <li>{props.first}</li>
                    </ul>
                )
            }

            or

            // Arrow function without the use of `()`
            const Nav = props => {
                return (
                    <ul>
                        <li>{props.first}</li>
                    </ul>
                )
            }

            --------------------------------------
            In this function,
                * The `function` keyword has been replaced with `const` and `=>`
                * The function accepts `props` as an argument and returns a JSX element.

        b. Function which doesn't accepts some parameters

            const Nav = () => {
                return (
                    <ul>
                        <li>Home</li>
                    </ul>
                )
            }

            or

            // Arrow function without the use of `()`
            const Nav = () => (
                <ul>
                    <li>Home</li>
                </ul>
            )

---------------------------------------------------------------------------------------------
forEach() method:-
    * The `forEach()` method is used to iterate over an array and perform a function on each element.
    * The `forEach()` method does not return a new array, it simply executes the function on each element.

    Ex:-
        const numbers = [1, 2, 3, 4, 5];
        numbers.forEach((number) => {
            console.log(number);
        });

        // Output:
        // 1
        // 2
        // 3
        // 4
        // 5

---------------------------------------------------------------------------------------------
Using forEach() and arrow function:-
    Ex:-
        // in ES5
        [10, 20, 30].forEach(function(item) {
            return item * 2;
            }
        );

        or

        // in ES6
        [10, 20, 30].forEach(item => return item * 2);

---------------------------------------------------------------------------------------------
Embedded JSX Expressions:-
    * They are used to embed JavaScript expressions inside JSX.
    * They are enclosed in curly braces `{}`.

    Ex:-
        function greet(name) {
            return <h1>Hello, {name}!</h1>;
        }

        const message = <p>{greet("World")}</p>;

        ---------------------------------------------
        The output will be:
            Hello, World!

---------------------------------------------------------------------------------------------
Ternary operators & functions:-
    * This is a shorthand way of writing an if-else statement.
    * It is used to conditionally render elements in JSX.

    Ex:-
        normal expression
        ------------------------------------
        let name = "John";
        if (name == "John") {
            console.log("Hello, John!");
        } else {
            console.log("Hello, Friend!");
        }

        ternary expression
        ------------------------------------
        let name = "John";
        let message = (name == "John") ? "Hello, John!" : "Hello, Friend!";
        console.log(message);

        ---------------------------------------------
        The output for both the expression will be:
            Hello, John!

---------------------------------------------------------------------------------------------
Expression as props:-
    * You can pass an expression as a prop to a component.
    * The expression will be evaluated and the result will be passed as a prop.

    Ex:-
        const bool = true;

        function Fun(props) {
            return (
                <h2>
                    toggleBoolean prop is:
                    {props.toggleBoolean.toString()}
                </h2>
            );
        }

        function App() {
            return (
                <div>
                    <h1>Boolean Prop Example</h1>
                    <Fun toggleBoolean={bool} />
                </div>
            );
        }
        ---------------------------------------------
        The output will be:
            Boolean Prop Example
            toggleBoolean prop is: true

---------------------------------------------------------------------------------------------
***************************************************************************************

                                    Week 2

***************************************************************************************
---------------------------------------------------------------------------------------------
Mouse Events Avaiable in React:-
    * onClick
    * onDoubleClick
    * onMouseEnter
    * onMouseLeave
    * onMouseMove
    * onMouseOver
    * onMouseOut

---------------------------------------------------------------------------------------------
Clipboard Events Avaiable in React:-
    * onCopy
    * onCut
    * onPaste

---------------------------------------------------------------------------------------------
Try Catch Block:-
    * The try-catch block is used to handle errors in JavaScript.
    * The code inside the try block is executed, and if an error occurs, the code inside the catch block is executed.

    Ex:-
        try {
            // code that may throw an error
            let x = 10;
            let y = 0;
            let z = x / y;
        } catch (error) {
            // code to handle the error
            console.log("Error:", error);
        }

---------------------------------------------------------------------------------------------
Event Handling:-
    * Event handling is the process of responding to user actions in a web application.
    * In React, events are handled using event handlers.
    * Event handlers are functions that are called when an event occurs.

    Ex:-
        function handleClick() {
            alert("Button clicked!");
        }

        function App() {
            return (
                <div>
                    <button onClick={handleClick}>Click Me</button>
                </div>
            );
        }

---------------------------------------------------------------------------------------------
Event handling techniques:-
    i. Inline anonymous ES5 functions:-
        * This is the most common way of handling events in React.
        * The event handler is defined inline as an anonymous function.

        Ex:-
            <button onClick={function() { alert("Button clicked!"); }}>
                Click Me
            </button>

    ii. Inline anonymous ES6 functions (arrow functions):-
        * This is the most common way of handling events in React.
        * The event handler is defined inline as an anonymous function.

        Ex:-
            <button onClick={() => alert("Button clicked!")}>
                Click Me
            </button>

    iii. Separate function declaration:-
        * In this method, we first declare a seperate function and then reference it's name in the event handler.

        Ex:-
           function App(){
                function handleClick() {
                    console.log("Button clicked!");
                }

                return (
                    <div>
                        <button onClick={handleClick}>
                            Seperate function declaration
                        </button>
                    </div>
                );
            }

    iv. Separate function expression:-
        * In this method, we first declare and store the function into a const variable and then reference it's name in the event handler.

        Ex:-
            function App(){
                const handleClick = () => {
                    console.log("Button clicked!");
                }

                return (
                    <div>
                        <button onClick={handleClick}>
                            Seperate function expression
                        </button>
                    </div>
                );
            }

---------------------------------------------------------------------------------------------
Parent-child relationship
    * This method is used to pass data from parent to child component.
    * The data flow starts from the parent component and ends at the child component.
    * The data flow can be multiple levels of nesting, from the parent component to the child component.

    Ex:-
        // Parent component
        function Parent() {
            const data = "Hello from Parent!";
            return <Child data={data} />;
        }

        // Child component
        function Child(props) {
            return <h1>{props.data}</h1>;
        }

        ---------------------------------------------
        The output will be within the h1 element:
            Hello from Parent!

        ---------------------------------------------
        Explanation:
            * The Parent component passes the `data prop` to the Child component.
            * The Child component receives the `data prop` and displays it in an `h1 element`.

---------------------------------------------------------------------------------------------
Data Flow in react:-
    * React follows a unidirectional data flow, meaning data flows in one direction, from parent to child.
    * This makes it easier to understand and debug the application.
    * The data can only be passed from parent to child, and not from child to parent.
    * The data that is passed from parent to child is called props.
    * The data which is recieved by the child component is called `state`.
    * The child component can modify the state, but it cannot modify the props, i.e. the data passed from parent to child.

---------------------------------------------------------------------------------------------
Hooks:-
    * Hooks are functions that let you use state and other React features in functional components.
    * Hooks are a new addition in React 16.8.
    * Hooks allow you to use state and lifecycle methods in functional components.
    * Hooks are used to manage state and side effects in functional components.
    * Hooks example are:- useState, useEffect, useContext, useReducer, useRef, etc.

    Ex:-
        import { useState } from 'react';

        export default function InputComponent() {
        const [inputText, setText] = useState('hello');

        // function to change the value of text, based on the input by the user
        function handleChange(e) {
            setText(e.target.value);
        }

        return (
            <>
                <input value={inputText} onChange={handleChange} />
                <p>You typed: {inputText}</p>
                <button onClick={() => setText('hello')}>
                    Reset
                </button>
                </>
            );
        }
        ---------------------------------------------
        In the above example,

        We have created a function which changes the value of text gets changed based on the input by the user.

---------------------------------------------------------------------------------------------
Different types of hooks:-
    i. useRef:-
        * The `useRef` hook is used to create a mutable reference that persists for the full lifetime of the component.
        * It can be used to access DOM elements or store mutable values.

        Ex:-
            function TextInputWithFocusButton() {
                const inputEl = useRef(null);
                const onButtonClick = () => {
                    // `current` points to the mounted text input element
                    inputEl.current.focus();
                };
                return (
                    <>
                    <input ref={inputEl} type="text" />
                    <button onClick={onButtonClick}>Focus the input</button>
                    </>
                );
            }

---------------------------------------------------------------------------------------------
Q. What is State?
A.
    * State is a built-in object in React that is used to manage the data of a component.
    * State is mutable and can be changed by the component itself.
    * State is used to store data that can change over time, such as user input or API responses.
    * State is managed within the component and can be passed to child components as props.
    * `useState()` hook is used to manage state in functional components.

    Ex:-
        import React, { useState } from 'react';

        function Counter() {
            const [count, setCount] = useState(0);

            return (
                <div>
                    <p>You clicked {count} times</p>
                    <button onClick={() => setCount(count + 1)}>
                        Click me
                    </button>
                </div>
            );
        }

---------------------------------------------------------------------------------------------
Stateful & Stateless components:-
    * Stateful components are components that manage their own state.
    * Stateless components are components that do not manage their own state and rely on props for data.

    Ex:-
        // Stateful component
        class Counter extends React.Component {
            constructor(props) {
                super(props);
                this.state = { count: 0 };
            }

            render() {
                return (
                    <div>
                        <p>You clicked {this.state.count} times</p>
                        <button onClick={() => this.setState({ count: this.state.count + 1 })}>
                            Click me
                        </button>
                    </div>
                );
            }
        }

        // Stateless component
        function StatelessComponent(props) {
            return <h1>{props.message}</h1>;
        }

---------------------------------------------------------------------------------------------
Lifting state:-
    * Lifting state is the process of moving state from a child component to a parent component.
    * This is done to share state between multiple components or to manage state in a single place.
    * Lifting state is done by passing a function from the parent component to the child component as a prop.

    Ex:-
        function Parent() {
            const [count, setCount] = useState(0);

            return (
                <div>
                    <Child count={count} setCount={setCount} />
                </div>
            );
        }

        function Child(props) {
            return (
                <div>
                    <p>You clicked {props.count} times</p>
                    <button onClick={() => props.setCount(props.count + 1)}>
                        Click me
                    </button>
                </div>
            );
        }

---------------------------------------------------------------------------------------------
Prop drilling:-
    * Prop drilling is the process of passing data from a parent component to a child component through multiple levels of nesting.
    * This can make the code difficult to read and maintain.
    * Prop drilling can be avoided by using context or state management libraries like Redux.

    Ex:-

        // Parent component passing `data` to child component
        function Parent() {
            const data = "Hello from Parent!";
            return <Child data={data} />;
        }

        // Child component passing `data` to grandchild component
        function Child(props) {
            return <GrandChild data={props.data} />;
        }

        function GrandChild(props) {
            return <h1>{props.data}</h1>;
        }
        ---------------------------------------------
        The output will be within the h1 element:
            Hello from Parent!

---------------------------------------------------------------------------------------------
Context API:-
    * Context API is a built-in feature in React that allows you to share data between components without having to pass props down manually at every level.
    * It is used to avoid prop drilling and make it easier to manage global state.
    * Context API is useful for managing global state, such as user authentication, theme, and language.

    Ex:-
        import React, { createContext, useContext } from 'react';

        const ThemeContext = createContext('light');

        function App() {
            return (
                <ThemeContext.Provider value="dark">
                    <Toolbar />
                </ThemeContext.Provider>
            );
        }

        function Toolbar() {
            return (
                <div>
                    <ThemedButton />
                </div>
            );
        }

        function ThemedButton() {
            const theme = useContext(ThemeContext);
            return <button className={theme}>Themed Button</button>;
        }
---------------------------------------------------------------------------------------------
Managing state
    * State is managed using the `useState` hook in functional components.
    * The `useState` hook returns an array with two elements: the current state and a function to update the state.

    Ex:-
        import React, { useState } from 'react';

        function Counter() {
            const [count, setCount] = useState(0);

            return (
                <div>
                    <p>You clicked {count} times</p>
                    <button onClick={() => setCount(count + 1)}>
                        Click me
                    </button>
                </div>
            );
        }

---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
