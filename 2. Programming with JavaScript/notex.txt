---------------------------------------------------------------------------------------------

                            Programming with JavaScript

---------------------------------------------------------------------------------------------
***************************************************************************************

                                    Week 1

***************************************************************************************
---------------------------------------------------------------------------------------------
JavaScript:-
    * JavaScript is a high-level, interpreted programming language.
    * It is used to code the front-end of web applications.
    * It is a prototype-based, multi-paradigm language that supports object-oriented,
      imperative, and functional programming styles.
    * It is backwards compatible with its previous versions.

    Alternatives to JavaScript:-
        i. Typescript
        ii. VBScript

---------------------------------------------------------------------------------------------
Comments in JS:-
    // Single line comment
    /*
        Multi-line comment
        Multi-line comment
    */

---------------------------------------------------------------------------------------------
Datatypes in JS:-
    * Number:-
        * Represents both integer and floating-point numbers.
        * All numbers in JavaScript are stored as 64-bit floating-point values.
        * Example:-
            var x = 10; // Integer
            var y = 10.5; // Floating-point number

    * String:-
        * Represents a sequence of characters.
        * Strings can be enclosed in single quotes (' '), double quotes (" "), or backticks (` `).
        * Example:-
            var str1 = 'Hello';
            var str2 = "World";
            var str3 = `Hello World`;

    * Boolean:-
        * Represents a logical entity and can have two values: true or false.
        * Example:-
            var isTrue = true;
            var isFalse = false;

    * Undefined
        * Represents a variable that has been declared but has not yet been assigned a value.
        * Example:-
            var x;
            console.log(x); // Output: undefined

    * Null
        * Represents the intentional absence of any object value.
        * It is a primitive value that represents "nothing" or "empty".
        * Example:-
            var x = null;
            console.log(x); // Output: null

    * Object
        * A collection of key-value pairs.
        * Objects can be created using object literals, constructor functions, or the Object.create() method.
        * This is what is also know as `JSON`, i.e. `JavaScript Object Notation`.
        * Example:-
            var person = {
                name: 'John',
                age: 30,
                isStudent: false
            };

    * Symbol (ES6)
    * BigInt (ES11)

---------------------------------------------------------------------------------------------
Operators:-
    i. Arithmetic Operators:-
        * + (Addition)
        * - (Subtraction)
        * * (Multiplication)
        * / (Division)
        * % (Modulus)
        * ** (Exponentiation) [ES6]
        * ++ (Increment)
        * -- (Decrement)

    ii. Assignment Operators:-
        * = (Assignment)
        * += (Addition Assignment)
        * -= (Subtraction Assignment)
        * *= (Multiplication Assignment)
        * /= (Division Assignment)
        * %= (Modulus Assignment)
        * **= (Exponentiation Assignment) [ES6]
        * &= (Bitwise AND Assignment)

    iii. Comparison Operators:-
        * == (Equal to)
        * === (Strict Equal to)
        * != (Not Equal to)
        * !== (Strict Not Equal to)
        * > (Greater than)
        * < (Less than)
        * >= (Greater than or equal to)
        * <= (Less than or equal to)

    iv. Logical Operators:-
        * && (Logical AND)
        * || (Logical OR)
        * ! (Logical NOT)

---------------------------------------------------------------------------------------------
Conditional Statements:-
    i. if statement:-
        if (condition) {
            // code to be executed if condition is true
        }

    ii. if-else statement:-
        if (condition) {
            // code to be executed if condition is true
        } else {
            // code to be executed if condition is false
        }

    iii. switch statement:-
        switch (expression) {
            case value1:
                // code to be executed if expression === value1
                break;
            case value2:
                // code to be executed if expression === value2
                break;
            default:
                // code to be executed if expression doesn't match any case
        }

---------------------------------------------------------------------------------------------
Loops:-
    i. for loop:-
        for (initialization; condition; increment/decrement) {
            // code to be executed
        }

    ii. while loop:-
        while (condition) {
            // code to be executed
        }

    iii. do-while loop:-
        do {
            // code to be executed
        } while (condition);

    iv. for...of loop:-
        for (const element of iterable) {
            // code to be executed
        }

    v. for...in loop:-
        for (const key in object) {
            // code to be executed
        }

---------------------------------------------------------------------------------------------
*****************************************************************************************


                                    Week 2


*****************************************************************************************
---------------------------------------------------------------------------------------------
Functions:-
    * A function is a block of code designed to perform a particular task.
    * Functions are executed when they are called or invoked.
    * Functions can take parameters and return values.

    i. Function Declaration:-
        function functionName(parameters) {
            // code to be executed
        }

    ii. Function Expression:-
        const functionName = function(parameters) {
            // code to be executed
        };

    iii. Arrow Function (ES6):-
        const functionName = (parameters) => {
            // code to be executed
        };

    iv. IIFE (Immediately Invoked Function Expression):-
        (function() {
            // code to be executed
        })();

---------------------------------------------------------------------------------------------
Array:-
    * An array is a special variable that can hold more than one value at a time.
    * Arrays are zero-indexed, meaning the first element is at index 0.
    * Array in js are objects with special properties and methods.
    *** This is same as `vector` in C++ ***

    i. Creating an Array:-
        var arrayName = [element1, element2, element3];

    ii. Accessing Array Elements:-
        var firstElement = arrayName[0];

    iii. Array Methods:-
        * push() - Adds one or more elements to the end of an array.
        * pop() - Removes the last element from an array.
        * shift() - Removes the first element from an array.
        * unshift() - Adds one or more elements to the beginning of an array.
        * splice() - Adds/removes elements from an array at a specified index.
        * slice() - Returns a shallow copy of a portion of an array into a new array.

---------------------------------------------------------------------------------------------
Objects in js:-
    * An object is a collection of properties, where each property is defined as a key-value pair.
    * Objects can be created using object literals, constructor functions, or the Object.create() method.

    i. Creating an Object:-
        var objectName = {
            key1: value1,
            key2: value2,
            key3: value3
        };

    ii. Accessing Object Properties:-
        var value = objectName.key1; // Dot notation
        var value = objectName['key1']; // Bracket notation

    iii. Object Methods:-
        * Object.keys() - Returns an array of a given object's own enumerable property names.
        * Object.values() - Returns an array of a given object's own enumerable property values.
        * Object.entries() - Returns an array of a given object's own enumerable string-keyed property [key, value] pairs.

    Ex:-
        var person = {
            name: 'John',
            age: 30,
            greet: function() {
                console.log('Hello, ' + this.name);
            }
        };

        person.greet(); // Output: Hello, John
---------------------------------------------------------------------------------------------
Math object:-
    * The Math object is a built-in object that provides properties and methods for mathematical constants and functions.
    * It is not a function object, but it is a static object.

    i. Properties:-
        * Math.PI - The value of Ï€ (pi).
        * Math.E - The value of Euler's number (e).

    ii. Methods:-
        * Math.abs(x) - Returns the absolute value of x.
        * Math.ceil(x) - Returns the smallest integer greater than or equal to x.
        * Math.floor(x) - Returns the largest integer less than or equal to x.
        * Math.round(x) - Rounds x to the nearest integer.
        * Math.max(x, y, z, ...) - Returns the largest of zero or more numbers.
        * Math.min(x, y, z, ...) - Returns the smallest of zero or more numbers.
        * Math.random() - Returns a pseudo-random number between 0 and 1.

    Ex:-
        // Random number between 0 and 99
        var randomNum = Math.floor(Math.random() * 100);
        console.log(randomNum);
---------------------------------------------------------------------------------------------
String operations:-
    * Strings are immutable in JavaScript, meaning they cannot be changed after they are created.
    * String methods do not modify the original string but return a new string.

    i. String Methods:-
        * length - Returns the length of the string.
        * charAt(index) - Returns the character at the specified index.
        * indexOf(substring) - Returns the index of the first occurrence of a substring.
        * lastIndexOf(substring) - Returns the index of the last occurrence of a substring.
        * slice(start, end) - Extracts a section of a string and returns it as a new string.
        * substring(start, end) - Returns a portion of the string between two specified indices.
        * toUpperCase() - Converts the string to uppercase letters.
        * toLowerCase() - Converts the string to lowercase letters.
        * trim() - Removes whitespace from both ends of a string.
        * split(separator) - Splits a string into an array of substrings.
        * concat(str1, str2, ...) - Joins two or more strings and returns a new string.
        * match(string) - Searches a string for a match against a regular expression and returns the matches.

    Ex:-
        var str = '  Hello World  ';
        var str1 = ' Good Morning ';
        console.log(str.length); // Output: 14
        console.log(str.charAt(0)); // Output: ' '
        console.log(str.indexOf('World')); // Output: 8
        console.log(str.lastIndexOf('o')); // Output: 10
        console.log(str.slice(2, 7)); // Output: 'Hello'
        console.log(str.substring(2, 7)); // Output: 'Hello'
        console.log(str.toUpperCase()); // Output: '  HELLO WORLD  '
        console.log(str.toLowerCase()); // Output: '  hello world  '
        console.log(str.trim()); // Output: 'Hello World'
        console.log(str.split(' ')); // Output: ['  Hello', 'World  ']
        console.log(str.concat(str1)); // Output: '  Hello World  Good Morning '
        console.log(str.match(/o/g)); // Output: ['o', 'o']

---------------------------------------------------------------------------------------------
Typeof operator:-
    * The typeof operator is used to determine the type of a variable or expression.
    * It returns a string indicating the type of the unevaluated operand.

    i. Syntax:-
        typeof operand

    ii. Possible return values:-
        * "undefined" - The variable has not been assigned a value.
        * "object" - The variable is an object (including arrays and null).
        * "boolean" - The variable is a boolean value (true or false).
        * "number" - The variable is a number (integer or floating-point).
        * "string" - The variable is a string.
        * "function" - The variable is a function.
        * "symbol" - The variable is a symbol (ES6).
        * "bigint" - The variable is a BigInt (ES11).

    Ex:-
        var x;
        console.log(typeof x); // Output: 'undefined'
        var y = null;
        console.log(typeof y); // Output: 'object'
        var z = 10;
        console.log(typeof z); // Output: 'number'

---------------------------------------------------------------------------------------------
Errors:-
    * Errors are problems that occur during the execution of a program.
    * JavaScript has built-in error objects that provide information about the error.

    i. Types of Errors:-
        * SyntaxError - Occurs when there is a syntax error in the code.
        * ReferenceError - Occurs when a variable is not defined.
        * TypeError - Occurs when a value is not of the expected type.
        * RangeError - Occurs when a number is outside the allowable range.
        * EvalError - Occurs when the eval() function is used incorrectly.

    ii. Handling Errors:-
        * try...catch statement:-
            try {
                // code that may throw an error
            } catch (error) {
                // code to handle the error
            }

        * finally block:-
            The finally block will execute after try and catch, regardless of whether an error occurred or not.

---------------------------------------------------------------------------------------------
Try catch block:-
    * The try...catch statement is used to handle exceptions in JavaScript.
    * It allows you to test a block of code for errors and handle them gracefully.

    i. Syntax:-
        try {
            // code that may throw an error
        } catch (error) {
            // code to handle the error
        } finally {
            // code that will always execute
        }

    ii. Example:-
        try {
            var x = 10;
            var y = 0;
            var result = x / y; // This will throw an error
        } catch (error) {
            console.log('Error occurred: ' + error.message);
        } finally {
            console.log('This will always execute.');
        }

---------------------------------------------------------------------------------------------
Empty Values in js:-
    * In JavaScript, there are several ways to represent "empty" or "no value":
        i. Undefined: A variable that has been declared but has not yet been assigned a value.
        ii. Null: An intentional absence of any object value.
        iii. NaN: Represents a value that is "Not-a-Number".
        iv. Empty String: A string with no characters (i.e., "").

    Ex:-
        var x; // undefined
        var y = null; // null
        var z = NaN; // Not-a-Number
        var str = ""; // empty string

---------------------------------------------------------------------------------------------
**********************************************************************************************

                                    Week 3


**********************************************************************************************
---------------------------------------------------------------------------------------------
Recursive function:-
    * A recursive function is a function that calls itself in order to solve a problem.
    * It must have a base case to terminate the recursion and prevent infinite loops.

    i. Example:-
        function factorial(n) {
            if (n === 0 || n === 1) {
                return 1; // Base case
            }
            return n * factorial(n - 1); // Recursive case
        }

        console.log(factorial(5)); // Output: 120

---------------------------------------------------------------------------------------------
Scope in js:-
    * Scope refers to the visibility of variables in different parts of the code.
    * There are two types of scope in JavaScript: global scope and local scope.

    i. Global Scope:-
        * Variables declared outside of any function or block have global scope.
        * They can be accessed from anywhere in the code.

    ii. Local Scope:-
        * Variables declared inside a function or block have local scope.
        * They can only be accessed within that function or block.

    iii. Block Scope (ES6):-
        * Variables declared with let and const have block scope.
        * They are only accessible within the block they are defined in.

---------------------------------------------------------------------------------------------
Var, let & const:-
    * var:-
        * Declares a variable that can be re-assigned.
        * Has function scope or global scope.
        * Can be hoisted (declared before its actual declaration).

    * let:-
        * Declares a block-scoped variable.
        * That can be re-assigned.
        * Cannot be hoisted.

    * const:-
        * Declares a block-scoped variable that cannot be re-assigned.
        * Must be initialized at the time of declaration.
        * Cannot be hoisted.

    Ex:-
        var x = 10;
        let y = 20;
        const z = 30;

        x = 15; // Allowed
        y = 25; // Allowed
        // z = 35; // Not allowed

---------------------------------------------------------------------------------------------
Object Oriented Programming (OOP):-
    * OOP is a programming paradigm based on the concept of "objects", which can contain data and methods.
    * JavaScript is a prototype-based language, meaning it uses prototypes instead of classes for inheritance.

    i. Classes (ES6):-
        * A class is a blueprint for creating objects.
        * It can contain properties and methods.

        class ClassName {
            constructor(parameters) {
                // constructor code
            }
            methodName() {
                // method code
            }
        }

    ii. Inheritance:-
        * Inheritance allows one class to inherit properties and methods from another class.
        * It is achieved using the extends keyword.

        class ChildClass extends ParentClass {
            // child class code
        }

    iii. Encapsulation:-
        * Encapsulation is the bundling of data and methods that operate on that data within one unit (class).
        * It restricts direct access to some components and can prevent the accidental modification of data.

    iv. Polymorphism:-
        * Polymorphism allows objects of different classes to be treated as objects of a common superclass.
        * It is achieved through method overriding and method overloading.

    Ex:-
        var person = {
            name: 'John',
            age: 30,
            greet: function() {
                console.log('Hello, ' + this.name);
            }
        };

        person.greet(); // Output: Hello, John

---------------------------------------------------------------------------------------------
Class in js:-
    * A class is a blueprint for creating objects with shared properties and methods.

    Ex:-
        class Person {
            constructor(name, age) {
                this.name = name;
                this.age = age;
            }
            greet() {
                console.log('Hello, ' + this.name);
            }
        }

        const person1 = new Person('John', 30);
        person1.greet(); // Output: Hello, John

---------------------------------------------------------------------------------------------
Built in Classes in js:-
    i. new Date():-
        * The Date object is used to work with dates and times.
        * It can be created using the new Date() constructor.

        Ex:-
            var date = new Date();
            console.log(date); // Output: Current date and time

    ii. new Error():-
        * The Error object is used to create custom error messages.
        * It can be created using the new Error() constructor.

        Ex:-
            var error = new Error('This is a custom error message');
            console.log(error.message); // Output: This is a custom error message

    iii. new Map():-
        * The Map object is a collection of key-value pairs.
        * It can be created using the new Map() constructor.

        Ex:-
            var map = new Map();
            map.set('key1', 'value1');
            map.set('key2', 'value2');
            console.log(map.get('key1')); // Output: value1

---------------------------------------------------------------------------------------------
Inheritance:-
    * Inheritance is a mechanism in OOP that allows one class to inherit properties and methods from another class.
    * In JavaScript, inheritance is achieved using the prototype chain.

    i. Prototypal Inheritance:-
        * Every object in JavaScript has a prototype object from which it can inherit properties and methods.
        * The prototype chain is used to look up properties and methods.

    ii. Example:-
        var bird = {
            wings: true,
            canFly: true,
            feathers: true
        };

        var eagle = Object.create(bird);
        console.log("Eagle: ", eagle); // Output: Eagle:  { }

        var eagle2 = Object.create(bird);
        console.log("Eagle2 has wings: ", eagle2.wings); // Output: Eagle2 has wings:  true

---------------------------------------------------------------------------------------------
Destructing in js:-
    * Destructuring is a syntax that allows unpacking values from arrays or properties from objects into distinct variables.

    i. Array Destructuring:-
        var arr = [1, 2, 3];
        var [a, b, c] = arr;
        console.log(a); // Output: 1
        console.log(b); // Output: 2
        console.log(c); // Output: 3

    ii. Object Destructuring:-
        var obj = { x: 10, y: 20 };
        var { x, y } = obj;
        console.log(x); // Output: 10
        console.log(y); // Output: 20

---------------------------------------------------------------------------------------------
For of loop:-
    * The for...of loop is used to iterate over iterable objects (like arrays, strings, maps, sets, etc.).
    * It provides a simpler way to loop through elements without needing an index.

    i. Syntax:-
        for (const element of iterable) {
            // code to be executed
        }

    ii. Example:-
        var arr = [1, 2, 3];
        for (const num of arr) {
            console.log(num); // Output: 1, 2, 3
        }

---------------------------------------------------------------------------------------------
For in loop:-
    * The for...in loop is used to iterate over the enumerable properties of an object.
    * It provides a way to loop through the keys of an object.

    i. Syntax:-
        for (const key in object) {
            // code to be executed
        }

    ii. Example:-
        var obj = { a: 1, b: 2, c: 3 };
        for (const key in obj) {
            console.log(key + ': ' + obj[key]); // Output: a: 1, b: 2, c: 3
        }

---------------------------------------------------------------------------------------------
Template Literatls:-
    * Template literals are string literals that allow embedded expressions.
    * They are enclosed by backticks (``) instead of single or double quotes.

    i. Syntax:-
        `string text ${expression} string text`

    ii. Example:-
        var name = 'John';
        var greeting = `Hello, ${name}!`;
        console.log(greeting); // Output: Hello, John!

---------------------------------------------------------------------------------------------
Data Structures in js:-
    * JavaScript provides several built-in data structures for storing and manipulating data.

    i. Array:-
        * An array is a collection of elements that can be accessed by index.
        * It is a zero-indexed, ordered list of values.
        Ex:-
            var arr = [1, 2, 3, 4, 5];
            console.log(arr[0]); // Output: 1

    ii. Object:-
        * An object is a collection of key-value pairs.
        * It is used to store related data and functions.
        Ex:-
            var obj = { name: 'John', age: 30 };
            console.log(obj.name); // Output: John

    iii. Set (ES6):-
        * A set is a collection of unique values.
        * It can store any type of value, including objects and arrays.
        * It does not allow duplicate values.
        Ex:-
            var set = new Set([1, 2, 3, 4, 5]);
            set.add(6);
            console.log(set); // Output: Set { 1, 2, 3, 4, 5, 6 }

    iv. Map (ES6):-
        * A map is a collection of key-value pairs where keys can be of any type.
        * It maintains the insertion order of keys.
        Ex:-
            var map = new Map();
            map.set('key1', 'value1');
            map.set('key2', 'value2');
            console.log(map.get('key1')); // Output: value1

---------------------------------------------------------------------------------------------
Spead Operator:-
    * The spread operator (...) is used to expand an iterable (like an array) into its individual elements.
    * It can be used in function calls, array literals, and object literals.

    i. Syntax:-
        ...iterable

    ii. Example:-
        var arr1 = [1, 2, 3];
        var arr2 = [4, 5, 6];
        var combined = [...arr1, ...arr2];
        console.log(combined); // Output: [1, 2, 3, 4, 5, 6]

---------------------------------------------------------------------------------------------
JS modules:-
    * JavaScript modules are reusable pieces of code that can be exported from one module and imported into another.
    * They help in organizing code and avoiding global scope pollution.

    i. Exporting a Module:-
        export const variableName = value;
        export function functionName() {
            // code
        }

    ii. Importing a Module:-
        import { variableName, functionName } from './module.js';

    iii. Default Export:-
        export default functionName;

    iv. Importing Default Export:-
        import functionName from './module.js';

---------------------------------------------------------------------------------------------
Js DOM:-
    * The Document Object Model (DOM) is a programming interface for web documents.
    * It represents the structure of a document as a tree of objects, allowing JavaScript to manipulate the content and structure of web pages.

    i. Selecting Elements:-
        * document.getElementById('id') - Selects an element by its ID.
        * document.getElementsByClassName('class') - Selects elements by their class name.
        * document.querySelector('selector') - Selects the first element that matches the CSS selector.
        * document.querySelectorAll('selector') - Selects all elements that match the CSS selector.

    ii. Manipulating Elements:-
        * element.innerHTML - Gets or sets the HTML content of an element.
        * element.style - Gets or sets the inline styles of an element.
        * element.setAttribute('attribute', 'value') - Sets an attribute on an element.
        * element.classList.add('class') - Adds a class to an element.
        * element.classList.remove('class') - Removes a class from an element.

    iii. Event Handling:-
        * element.addEventListener('event', function) - Attaches an event handler to an element.
        * event.preventDefault() - Prevents the default action of an event.

---------------------------------------------------------------------------------------------
Js Selectors:-
    i. document.querySelector('selector'):-
        * Selects the first element that matches the specified CSS selector.
        * Example:-
            var element = document.querySelector('.className');

    ii. document.querySelectorAll('selector'):-
        * Selects all elements that match the specified CSS selector.
        * Returns a NodeList of elements.
        * Example:-
            var elements = document.querySelectorAll('.className');

    iii. document.getElementById('id'):-
        * Selects an element by its ID.
        * Example:-
            var element = document.getElementById('elementId');

    iv. document.getElementsByClassName('className'):-
        * Selects all elements with the specified class name.
        * Returns an HTMLCollection of elements.
        * Example:-
            var elements = document.getElementsByClassName('className');

    v. document.getElementsByTagName('tagName'):-
        * Selects all elements with the specified tag name.
        * Returns an HTMLCollection of elements.
        * Example:-
            var elements = document.getElementsByTagName('div');

---------------------------------------------------------------------------------------------
Event Handler:-
    * An event handler is a function that is executed when a specific event occurs on an element.
    * JavaScript provides several ways to attach event handlers to elements.

    i. Inline Event Handlers:-
        * You can add an event handler directly in the HTML element using attributes like onclick, onmouseover, etc.
        * Example:-
            <button onclick="alert('Button clicked!')">Click me</button>

    ii. addEventListener(type, function):-
        * The addEventListener() method allows you to attach an event handler to an element.
        * It can be used to listen for multiple events on the same element.
        * Example:-
            var button = document.querySelector('button');
            button.addEventListener('click', function() {
                alert('Button clicked!');
            });

    iii. removeEventListener():-
        * The removeEventListener() method removes an event handler that was previously attached using addEventListener().
        * Example:-
            button.removeEventListener('click', function);

---------------------------------------------------------------------------------------------
Capturing Input:-
    * Using the function named `prompt()`, we can capture input from the user.
    * The prompt() function displays a dialog box that prompts the user for input.
    * It returns the input value as a `string` or null if the user cancels the prompt.

---------------------------------------------------------------------------------------------
JSON file type:-
    * JSON (JavaScript Object Notation) is a lightweight data interchange format that is easy for humans to read and write.
    * It is also easy for machines to parse and generate.
    * JSON is language-independent but uses conventions that are familiar to programmers of the C family of languages.

    i. JSON Syntax:-
        * Data is represented as key-value pairs.
        * Keys must be strings enclosed in double quotes.
        * Values can be strings, numbers, objects, arrays, booleans, or null.

    ii. Example:-
        {
            "name": "John",
            "age": 30,
            "isStudent": false,
            "courses": ["Math", "Science"],
            "address": {
                "city": "New York",
                "zip": "10001"
            }
        }

---------------------------------------------------------------------------------------------
JSON functions in js are:-
    i. JSON.parse():-
        * Converts a JSON string into a JavaScript object.
        * Example:-
            var jsonString = '{"name": "John", "age": 30}';
            var jsonObject = JSON.parse(jsonString);
            console.log(jsonObject.name); // Output: John

    ii. JSON.stringify():-
        * Converts a JavaScript object into a JSON string.
        * Example:-
            var jsonObject = { name: 'John', age: 30 };
            var jsonString = JSON.stringify(jsonObject);
            console.log(jsonString); // Output: {"name":"John","age":30}

---------------------------------------------------------------------------------------------
********************************************************************************************


                                    Week 4


********************************************************************************************
---------------------------------------------------------------------------------------------
Node js:-
    * It is a standalone JavaScript runtime environment that      allows you to run JavaScript code outside of a web browser.
    * It is built on the V8 JavaScript engine, which is used in Google Chrome.
    * It can be used to build server-side applications, command-line tools, and more.

---------------------------------------------------------------------------------------------
JEST:-
    * Jest is a JavaScript testing framework developed by Facebook.
    * It is used for testing JavaScript code, including React applications.
    * It provides a simple and easy-to-use API for writing tests.

    i. Installation:-
        * You can install Jest using npm or yarn.
        * Example:-
            npm install --save-dev jest

    ii. Writing Tests:-
        * Tests are written in files with the .test.js or .spec.js extension.
        * You can use the test() or it() function to define a test case.
        * You can use the expect() function to make assertions about the code being tested.

    iii. Running Tests:-
        * You can run tests using the command line.
        * Example:-
            npx jest

    iv. Example:-
        let a = "ABCD";
        let b = "EFGH";
        expect(concat(a, b)).toBe("ABCDEFGH");

---------------------------------------------------------------------------------------------
Refactoring:-
    * Refactoring is the process of restructuring existing code without changing its external behavior.
    * It is done to improve the design, structure, and readability of the code.
    * It can also help in reducing complexity and improving performance.

    i. Techniques:-
        * Extract Function: Break down large functions into smaller, more manageable functions.
        * Rename Variables: Use meaningful names for variables to improve readability.
        * Remove Dead Code: Eliminate unused or unnecessary code.
        * Simplify Conditionals: Use simpler expressions and avoid nested conditionals.

    ii. Example:-
        function calculateArea(radius) {
            return Math.PI * radius * radius;
        }

        // Refactored
        function calculateCircleArea(radius) {
            return Math.PI * Math.pow(radius, 2);
        }

---------------------------------------------------------------------------------------------
TDD:-
    * Test-Driven Development (TDD) is a software development process that relies on the repetition of a very short development cycle.
    * It is based on the idea of writing tests before writing the actual code.
    * The process involves writing a test case, running it to see it fail, writing the minimum code to pass the test, and then refactoring the code.

    i. Steps:-
        1. Write a failing test case.
        2. Run the test case to see it fail.
        3. Write the minimum code to pass the test.
        4. Run the test case to see it pass.
        5. Refactor the code for better design and readability.

    ii. Example:-
        function add(a, b) {
            return a + b;
        }

        // Test case
        test('adds 1 + 2 to equal 3', () => {
            expect(add(1, 2)).toBe(3);
        });

---------------------------------------------------------------------------------------------
Types of testing:-
    i. Unit Testing:-
        * Tests individual components or functions in isolation.
        * It ensures that each part of the code works as expected.

    ii. Integration Testing:-
        * Tests the interaction between different components or modules.
        * It ensures that the components work together as intended.

    iii. Functional Testing:-
        * Tests the functionality of the application against the requirements.
        * It ensures that the application behaves as expected.

    iv. End-to-End Testing:-
        * Tests the entire application from start to finish.
        * It simulates real user scenarios to ensure the application works as intended.
        * This can be done by someone who is not a developer.

    v. Regression Testing:-
        * Tests the application after changes or updates to ensure that existing functionality is not broken.
        * It ensures that new changes do not introduce new bugs.

---------------------------------------------------------------------------------------------
Mocking:-
    * Mocking is the process of creating a simulated version of an object or function for testing purposes.
    * It allows you to isolate the code being tested and control its behavior.

    i. Example:-
        const mockFunction = jest.fn();
        mockFunction.mockReturnValue('mocked value');
        expect(mockFunction()).toBe('mocked value');

    ii. Use Cases:-
        * Mocking external dependencies (like APIs) to avoid network calls during testing.
        * Controlling the behavior of functions to test different scenarios.

---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
