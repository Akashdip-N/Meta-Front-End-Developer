---------------------------------------------------------------------------------------------

                            HTML and CSS in depth notes

---------------------------------------------------------------------------------------------
***************************************************************************************

                                    Week 1

***************************************************************************************
---------------------------------------------------------------------------------------------
HTML:-
    * Hypertext Markup Language,
        Hypertext: text with links
        Markup: a system for annotating a document in a way that is syntactically distinguishable from the text

---------------------------------------------------------------------------------------------
Article ELement
    * The <article> element represents a self-contained composition in a document, page, application, or site,
        that is intended to be independently distributable or reusable (e.g., in syndication).
    * Examples of articles include: forum post, magazine or newspaper article, blog entry, user-submitted comment,
        or any other independent item of content.
    * The <article> element can be used as a child of the <body> element or as a child of the <section> element.
    * The <article> element must have a heading (e.g., an <h1>, <h2>, etc.) as its first child.
    Ex:-
        <article>
            <h1>Article Title</h1>
            <p>This is the content of the article.</p>
        </article>

        -----------------------------------------------
        The output will be something like this:-
        Article Title
        This is the content of the article.

---------------------------------------------------------------------------------------------
Nav tag:-
    * The <nav> element represents a section of a page that links to other pages or to parts within the page.
    * The <nav> element is intended for navigation links, such as menus, tables of contents, and indexes.
    * The <nav> element can be used as a child of the <body> element or as a child of the <header>, <footer>, or <aside> elements.

    Ex:-
        <nav>
            <ul>
                <li><a href="#home">Home</a></li>
                <li><a href="#about">About</a></li>
                <li><a href="#contact">Contact</a></li>
            </ul>
        </nav>

        -----------------------------------------------
        The output will be something like this:-
        Home
        About
        Contact

---------------------------------------------------------------------------------------------
Footer Tag:-
    * The <footer> element represents a footer for its nearest sectioning content or sectioning root element.
    * This element typically contains information about the author of the section, copyright information, links to related documents, etc.

---------------------------------------------------------------------------------------------
Section tag:-
    * The <section> element represents a thematic grouping of content, typically with a heading.
    * The <section> element is intended to represent a standalone section of content that is related to the main topic of the document.
    * The <section> element can be used as a child of the <body> element or as a child of the <article>, <aside>, or <nav> elements.

    Ex:-
        <section>
            <h2>Section Title</h2>
            <p>This is the content of the section.</p>
        </section>

        -----------------------------------------------
        The output will be something like this:-
        Section Title
        This is the content of the section.

---------------------------------------------------------------------------------------------
Summary tag:-
    * The <summary> element represents a summary, heading, or legend for a <details> element.
    * The <summary> element is intended to provide a summary of the content of the <details> element.
    * The <summary> element can be used as a child of the <details> element.

    Ex:-
        <details>
            <summary>Details Title</summary>
            <p>This is the content of the details.</p>
        </details>

        -----------------------------------------------
        The output will be something like this:-
        Details Title
        This is the content of the details.

---------------------------------------------------------------------------------------------
Content tag:-
    i. <blockquote> element represents a section that is quoted from another source.
    ii. <cite> element represents the title of a work.
    iii. <q> element represents a short inline quotation.
    iv. <pre> element represents preformatted text, which are typically rendered in the web browser using a monospace font.
    v. <dd> element represents a description or definition of a term.
    vi. <figcaption> element represents a caption or legend for a <figure> element.
    vii. <hr> this adds a horizontal line to the page.

---------------------------------------------------------------------------------------------
Differnt table tags:-
    i. <ul>:-
        * The <ul> element represents an unordered list of items.
        * The <ul> element is typically used to create a `bulleted list` of items.

    ii. <ol>:-
        * The <ol> element represents an ordered list of items.
        * The <ol> element is typically used to create a `numbered list` of items.

    iii.<dl>:-
        * The <dl> element represents a description list.
        * The <dl> element is typically used to create a list of `terms and their definitions`.

---------------------------------------------------------------------------------------------
Metadata:-
    * Metadata is data that provides information about other data.
    * Metadata is typically used to describe the content, structure, and relationships of data.
    * Metadata can be used to improve the searchability, organization, and usability of data.
    * These are not displayed on the page, but are used by browsers and search engines to understand the content of the page.
    * Metadata is typically included in the <head> section of an HTML document.

------------------------------------------------------------------------------------------------
Meta tag:-
    * The <meta> tags are used to add metadata to an HTML document.
    * The tag consists of two attributes:
        i. name:-
            * The name attribute specifies the name of the metadata.
            * The name attribute is typically used to specify the type of metadata, such as "description", "keywords", "author", etc.
        ii. content:-
            * The content attribute specifies the value of the metadata.
            * The content attribute is typically used to specify the value of the metadata, such as the description of the page, the keywords for search engines, etc.

    Ex:-
        i. Author metadata:- It specifies the author of the document.

            Ex:- <meta name="author" content="John Doe">
            ----------------------------------------
            This specifies the author of the document as "John Doe".

        ii. Description metadata:- It specifies the description of the document.

            Ex:- <meta name="description" content="This is a sample HTML document.">
            ----------------------------------------
            This specifies the description of the document as "This is a sample HTML document".

        iii. Keywords metadata:- It specifies the keywords for the document. THESE ARE NOW ABANDONED BY GOOGLE, FOR SEO BECAUSE OF IT'S MISUSE.

            Ex:- <meta name="keywords" content="HTML, CSS, JavaScript">
            ----------------------------------------
            This specifies the keywords for the document as "HTML, CSS, JavaScript".

        iv. Robots metadata:-
            * It specifies the instructions for search engine robots.
            * Types of content for robots metadata:
                i. index:- Specifies that the page should be indexed by search engines.
                ii. noindex:- Specifies that the page should not be indexed by search engines.
                iii. follow:- Specifies that the links on the page should be followed by search engines.
                iv. nofollow:- Specifies that the links on the page should not be followed by search engines.

            Ex:- <meta name="robots" content="index, follow">
            ----------------------------------------
            This specifies the instructions for search engine robots to index the page and follow the links.

        v. viewport metadata:-
            * It specifies the viewport settings for responsive web design.
            * The viewport is the visible area of a web page on a device.
            * The viewport metadata is used to control the layout of the page on different devices.

            Ex:- <meta name="viewport" content="width=device-width, initial-scale=1.0">
                ----------------------------------------
                This specifies the viewport settings for responsive web design, with a width of the device width and an initial scale of 1.0.

    Other examples:-
        * <meta name="googlebot" content=”notranslate” />
            This specifies that the page should not be translated by Google Translate.

---------------------------------------------------------------------------------------------
HTTP-equiv:-
    * The http-equiv attribute is used to provide HTTP headers in the HTML document.
    * The http-equiv attribute is typically used to specify the content type, character set, and caching settings for the page.
    * The http-equiv attribute can be used with the <meta> tag.

    Ex:-
        i. Content-Type metadata:-
            Ex:- <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
            ----------------------------------------
            This specifies the content type and character set for the page as "text/html" and "UTF-8".

        ii. Refresh metadata:-
            Ex:- <meta http-equiv="refresh" content="30">
            ----------------------------------------
            This specifies that the page should refresh every 30 seconds.

        iii. Cache-Control metadata:-
            Ex:- <meta http-equiv="Cache-Control" content="no-cache">
            ----------------------------------------
            This specifies that the page should not be cached by the browser.

---------------------------------------------------------------------------------------------
Types of layout designs:-
    i. Top navbar layout:-
        * The top navbar layout is a common layout design that consists of a navigation bar at the top of the page.
        * The navigation bar typically contains links to different sections of the page or to other pages on the website.

    ii. Carousel layout:-
        * The carousel layout is a common layout design that consists of a rotating set of images or content.
        * The carousel typically contains navigation controls to allow the user to navigate through the images or content.

    iii. Blog layout:-
        * The blog layout is a common layout design that consists of a list of blog posts or articles.
        * The blog layout typically contains a title, author, date, and content for each blog post or article.

    iv. Dashboard layout:-
        * The dashboard layout is a common layout design that consists of a set of widgets or panels that display information.
        * The dashboard layout typically contains navigation controls to allow the user to navigate through the widgets or panels.

---------------------------------------------------------------------------------------------
Open Graph Protocol:-
    * The Open Graph protocol is a set of meta tags that are used to control how web pages are displayed on social media platforms.
    * The Open Graph protocol is typically used to specify the title, description, and image for a web page when it is shared on social media.

    Ex:-
        i. Title metadata:-
            Ex:- <meta property="og:title" content="Sample Web Page">
            ----------------------------------------
            This specifies the title of the web page as "Sample Web Page".

        ii. Description metadata:-
            Ex:- <meta property="og:description" content="This is a sample web page.">
            ----------------------------------------
            This specifies the description of the web page as "This is a sample web page".

        iii. Image metadata:-
            Ex:- <meta property="og:image" content="https://example.com/image.jpg">
            ----------------------------------------
            This specifies the image for the web page as "https://example.com/image.jpg".

        iv. URL metadata:-
            Ex:- <meta property="og:url" content="https://example.com">
            ----------------------------------------
            This specifies the URL of the web page as "https://example.com".

---------------------------------------------------------------------------------------------
HTML Forms:-
    * HTML forms are used to collect user input and submit it to a server for processing.
    * HTML forms consist of various form elements, such as text fields, checkboxes, radio buttons, and buttons.
    * HTML forms can be used to create a wide variety of user interfaces, such as login forms, registration forms, and search forms.

    Ex:-
        <form action="submit.php" method="post">
            <label for="name">Name:</label>
            <input type="text" id="name" name="name">
            <input type="submit" value="Submit">
        </form>

        -----------------------------------------------
        The output will be something like this:-
        Name: [____________________]
        [Submit]

---------------------------------------------------------------------------------------------
Form validation:-
    * Form validation is the process of checking user input in a form to ensure that it meets certain criteria.
    * Types of form validation:
        i. Client-side validation:-
            * Client-side validation is performed in the user's web browser before the form is submitted to the server.
            * Client-side validation is typically used to provide immediate feedback to the user and to reduce server load.

        ii. Server-side validation:-
            * Server-side validation is performed on the server after the form is submitted.
            * Server-side validation is typically used to ensure that the data is valid and secure before processing it.

---------------------------------------------------------------------------------------------
Client-side validation & it's types:-
    i. <input type="email>
        This will validate that the input is a valid email address.
    ii. <input type="url>
        This will validate that the input is a valid URL.
    iii. <input type="tel">
        This will validate that the input is a valid telephone number.
    iv. <input type="number">
        This will validate that the input is a valid number.
    v. <input type="date">
        This will validate that the input is a valid date.
    vi. <input type="color">
        This will validate that the input is a valid color.

---------------------------------------------------------------------------------------------
Input types:-
    i. <button> element:-
        * It represents a clickable button.
        * It can be used to submit a form, reset a form, or perform a custom action.
        * It can contain text, images, or other HTML elements.
        * Example:-
            <button type="submit">Submit</button>
            <button type="reset">Reset</button>
            <button type="button" onclick="alert('Button clicked!')">Click me!</button>
            ----------------------------------------
            This will create three buttons: a submit button, a reset button, and a custom button that displays an alert when clicked.

    ii. Checkbox:-
        * It represents a checkbox input.
        * It can be used to select one or more options from a list.
        * Example:-
            <input type="checkbox" id="option1" name="option1" value="Option 1">
            <label for="option1">Option 1</label>
            <input type="checkbox" id="option2" name="option2" value="Option 2">
            <label for="option2">Option 2</label>
            ----------------------------------------
            This will create two checkboxes with labels "Option 1" and "Option 2".

    iii. Radio button:-
        * It represents a radio button input.
        * It can be used to select one option from a list.
        * Example:-
            <input type="radio" id="option1" name="options" value="Option 1">
            <label for="option1">Option 1</label>
            <input type="radio" id="option2" name="options" value="Option 2">
            <label for="option2">Option 2</label>
            ----------------------------------------
            This will create two radio buttons with labels "Option 1" and "Option 2".

    iv. Submit:-
        * It represents a submit button.
        * It can be used to submit a form.
        * Example:-
            <input type="submit" value="Submit">
            ----------------------------------------
            This will create a submit button with the label "Submit".

    v. Text:-
        * It represents a single-line text input.
        * It can be used to enter a single line of text.
        * Example:-
            <input type="text" id="name" name="name">
            ----------------------------------------
            This will create a single-line text input with the label "Name".

    vi. Password:-
        * It represents a password input.
        * It can be used to enter a password.
        * Example:-
            <input type="password" id="password" name="password">
            ----------------------------------------
            This will create a password input with the label "Password".

    vii. Date:-
        * It represents a date input.
        * It can be used to enter a date.
        * Example:-
            <input type="date" id="date" name="date">
            ----------------------------------------
            This will create a date input with the label "Date".

    viii. Datetime-local:-
        * It represents a date and time input.
        * It can be used to enter a date and time.
        * Example:-
            <input type="datetime-local" id="datetime" name="datetime">
            ----------------------------------------
            This will create a date and time input with the label "Date and Time".

    ix. Email:-
        * It represents an email input.
        * It can be used to enter an email address.
        * Example:-
            <input type="email" id="email" name="email">
            ----------------------------------------
            This will create an email input with the label "Email".

    x. File:-
        * It represents a file input.
        * It can be used to upload a file.
        * Example:-
            <input type="file" id="file" name="file">
            ----------------------------------------
            This will create a file input with the label "File".

    xi. Hidden:-
        * It represents a hidden input.
        * It can be used to store data that is not visible to the user.
        * Example:-
            <input type="hidden" id="hidden" name="hidden" value="Hidden value">
            ----------------------------------------
            This will create a hidden input with the label "Hidden".

    xii. Image:-
        * It represents an image input.
        * It can be used to upload an image.
        * Example:-
            <input type="image"src="submit_img.png" alt="Submit" width="48" height="48">
            ----------------------------------------
            This will create an image input with the label "Submit" and a width and height of 48 pixels.

    xiii. Number:-
        * It represents a number input.
        * It can be used to enter a number.
        * Example:-
            <input type="number" id="quantity" name="quantity" min="1" max="5">
            ----------------------------------------
            This will create a number input with the label "Number".

    xiv. Month:-
        * It represents a month input.
        * It can be used to enter a month.
        * Example:-
            <label for="bdaymonth">Birthday (month and year):</label>
            <input type="month" id="bdaymonth" name="bdaymonth" min="1930-01" value="2000-01">
            ----------------------------------------
            This will create a month input with the label "Month".

---------------------------------------------------------------------------------------------
Min & Max attributes:-
    * The min and max attributes are used to specify the minimum and maximum values for input elements.
    * The min and max attributes can be used with the following input types:
        i. Number
        ii. Range
        iii. Date
        iv. Time
        v. Month
        vi. Week

    Ex:-
        <input type="number" id="age" name="age" min="1" max="100">
        ----------------------------------------
        This will create a number input with a minimum value of 1 and a maximum value of 100.
        And the name of the input is "age", which is used to identify the input when the form is submitted.

---------------------------------------------------------------------------------------------
Patterns:-
    * The pattern attribute is used to specify a regular expression that the input value must match.
    * The pattern attribute can be used with the following input types:
        i. Text
        ii. Search
        iii. Tel
        iv. Url
        v. Email

    Ex:-
        <input type="tel" id="phone" name="phone" pattern=”^(?:0|\+?44)(?:\d\s?){9,10}$” >
        ----------------------------------------
        This will create a telephone input with a pattern that matches UK telephone numbers.

---------------------------------------------------------------------------------------------
Form sending methods:-
    i. GET method:-
        * This method is used to send data to the server as part of the URL.
        * This method is typically used for retrieving data from the server.
        * This method is `not secure`, as the data is visible in the URL.
        **** BY DEFAULT IT IS GET METHOD, SO WE DON'T NEED TO SPECIFY IT IN THE FORM TAG. ****

    ii. POST method:-
        * This method is used to send data to the server as part of the request body.
        * This method is typically used for submitting data to the server.
        * This method is more secure than the GET method, as the data is not visible in the URL.

---------------------------------------------------------------------------------------------
Essential Attributes of form data sending:-
    i. Action:-
        * The action attribute specifies the URL to which the form data should be sent.
        * The action attribute is typically used to specify the server-side script that will process the form data.

        Ex:- <form action="www.Example.com" method="post">
                ----------------------------------------
                This specifies that the form data should be sent to the "www.Example.com" URL using the POST method.

    ii. Method:-
        * The method attribute specifies the HTTP method to be used when sending the form data.
        * The method attribute can be set to either "GET" or "POST".

        Ex:- <form action="submit.php" method="post">
            ----------------------------------------
            This specifies that the form data should be sent to the "submit.php" script using the POST method.

---------------------------------------------------------------------------------------------
Absolute & Relative path:-
    a. Absolute Path:-
        * An absolute path is a complete URL that specifies the location of a resource on the web.
        * An absolute path includes the protocol (http or https), the domain name, and the path to the resource.

        Ex:-
            The URL of the main website is:- `https://meta.com`,

            and the URL of the login form is:- `https://meta.com/company-info/`

            and the form action is:-
            <form action="/login" method="post">
            ----------------------------------------
            This specifies that the form data should be sent to the https://meta.com/login URL using the POST method.

    b. Relative Path:-
        * A relative path is a partial URL that specifies the location of a resource relative to the current page.
        * A relative path does not include the protocol or domain name.

        Ex:-
            The URL of the main website is:- `https://meta.com`,

            and the URL of the login form is:- `https://meta.com/company-info/`

            and the form action is:-
            <form action="login" method="post">
            ----------------------------------------
            This specifies that the form data should be sent to the https://meta.com/company-info/login URL using the POST method.

---------------------------------------------------------------------------------------------
HTML form elements:-
    i. <input> element:-
        * This element is used to create various types of input fields in a form.
        * The type attribute specifies the type of input field to be created.
        * The name attribute specifies the name of the input field, which is used to identify the input when the form is submitted.

        Ex:-
            <input type="text" id="name" name="name">
            ----------------------------------------
            This will create a single-line text input field with the label "Name".

    ii. <textarea> element:-
        * This element is used to create a multi-line text input field in a form.
        * The rows and cols attributes specify the number of rows and columns for the textarea.

        Ex:-
            <textarea id="message" name="message" rows="4" cols="50">
                This is a sample message.
            </textarea>
            ----------------------------------------
            This will create a multi-line text input field with the label "Message".

    iii. <select> element:-
        * This element is used to create a drop-down list in a form.
        * The <option> elements are used to define the options in the drop-down list.

        Ex:-
            <select id="country" name="country">
                <option value="USA">USA</option>
                <option value="Canada">Canada</option>
                <option value="UK">UK</option>
            </select>
            ----------------------------------------
            This will create a drop-down list with the label "Country".

    iv. <option> element:-
            * This element is used to define an option in a drop-down list or a list of predefined options.
            * The value attribute specifies the value of the option.

            Ex:-
                <select id="country" name="country">
                    <option value="USA">USA</option>
                    <option value="Canada">Canada</option>
                    <option value="UK">UK</option>
                </select>
                ----------------------------------------
                This will create a drop-down list with the label "Country".

    v. <button> element:-
        * This element is used to create a clickable button in a form.
        * The type attribute specifies the type of button to be created (submit, reset, or button).

        Ex:-
            <button type="submit">Submit</button>
            ----------------------------------------
            This will create a submit button with the label "Submit".

    vi. <label> element:-
        * This element is used to create a label for an input field in a form.
        * The for attribute specifies the id of the input field that the label is associated with.

        Ex:-
            <label for="name">Name:</label>
            <input type="text" id="name" name="name">
            ----------------------------------------
            This will create a label for the input field with the label "Name".

    vii. <fieldset> element:-
        * This element is used to group related elements in a form.
        * It is used to create a caption for the fieldset.

        Ex:-
            <fieldset>
                <legend>Personal Information</legend>
                <label for="name">Name:</label>
                <input type="text" id="name" name="name">
            </fieldset>
            ----------------------------------------
            This will create a fieldset with the label "Personal Information" and an input field for the name.

    viii. <legend> element:-
        * This element is used to create a caption for a fieldset.
        * It is typically used to provide a title or description for the fieldset.

        Ex:-
            <fieldset>
                <legend>Personal Information</legend>
                <label for="name">Name:</label>
                <input type="text" id="name" name="name">
            </fieldset>
            ----------------------------------------
            This will create a fieldset with the label "Personal Information" and an input field for the name.

    ix. <datalist> element:-
        * This element is used to create a list of predefined options for an input field.
        * The <option> elements are used to define the options in the datalist.
        * This is different from the <select> element, as it allows the user to enter a custom value in addition to selecting from the list.

        Ex:-
            <input type="text" id="name" name="name" list="names">
            <datalist id="names">
                <option value="John">
                <option value="Jane">
                <option value="Doe">
            </datalist>
            ----------------------------------------
            This will create a text input field with a list of predefined options for the name.

    x. <output> element:-
        * This element is used to display the result of a calculation or user action.
        * It is typically used in conjunction with JavaScript to display the result of a calculation.

        Ex:-
            <form oninput="result.value=parseInt(a.value)+parseInt(b.value)">
                <input type="range" id="a" value="50">
                +
                <input type="number" id="b" value="50">
                =
                <output name="result" for="a b">100</output>
            </form>
            ----------------------------------------
            This will create a form that displays the result of the calculation.

    xi. <optgroup> element:-
        * This element is used to group related options in a drop-down list.
        * It is typically used to create a hierarchical structure for the options.

        Ex:-
            <select id="country" name="country">
                <optgroup label="North America">
                    <option value="USA">USA</option>
                    <option value="Canada">Canada</option>
                </optgroup>
                <optgroup label="Europe">
                    <option value="UK">UK</option>
                    <option value="France">France</option>
                </optgroup>
            </select>
            ----------------------------------------
            This will create a drop-down list with two groups of options: "North America" and "Europe".

---------------------------------------------------------------------------------------------
Audio & Video streaming:-
    * The <audio>, <video> element is used to embed audio & video content respectively in a web page.
    * Both elements support various attributes, such as controls, autoplay, loop, and muted.

    Ex:-
        <audio controls>
            <source src="audio.mp3" type="audio/mpeg">
            Your browser does not support the audio element.
        </audio>

        <video width="320" height="240" controls>
            <source src="video.mp4" type="video/mp4">
            Your browser does not support the video tag.
        </video>

        -----------------------------------------------
        This will create an audio player and a video player with controls.

---------------------------------------------------------------------------------------------
iFrame:-
    * The <iframe> element is used to embed another HTML document within the current document.
    * The src attribute specifies the URL of the document to be embedded.
    * The width and height attributes specify the size of the iframe.
    * This element will be used to add "microphone" and "camera" access to the page.

    Ex:-
        <iframe src="https://www.example.com" width="600" height="400"></iframe>

        -----------------------------------------------
        This will create an iframe that displays the content of "https://www.example.com".

---------------------------------------------------------------------------------------------
Sandbox:-
    * The sandbox attribute is used to apply extra restrictions to an iframe.
    * The sandbox attribute can be used to prevent the iframe from executing scripts, submitting forms, or accessing the parent document.

    Ex:-
        <iframe src="https://www.example.com" sandbox></iframe>

        -----------------------------------------------
        This will create an iframe with extra restrictions applied.

---------------------------------------------------------------------------------------------
GRAPHICS PORGAMMING
    i. GIF (Graphics Interchange Format):-
        * GIF is a bitmap image format that supports both animated and static images.
        * GIF uses lossless compression, which means that the image quality is not degraded when the image is compressed.
        * GIF supports a maximum of 256 colors, which makes it suitable for simple graphics and animations.

    ii. WebGL:-
        * WebGL is a JavaScript API that allows rendering 2D and 3D graphics in a web browser.
        * WebGL is based on OpenGL ES, which is a subset of the OpenGL API for embedded systems.
        * WebGL allows developers to create interactive graphics applications, such as games and simulations, using JavaScript and HTML5.

---------------------------------------------------------------------------------------------
***************************************************************************************

                                    Week 2

***************************************************************************************
---------------------------------------------------------------------------------------------
Flexbox:-
    * Flexbox is a one-dimensional layout model that allows you to create flexible and responsive layouts.
    * Flexbox is designed to distribute space along a single axis (either horizontally or vertically).
    * Flexbox is ideal for creating layouts that require alignment, distribution, and spacing of items.

    Ex:-
        .container {
            display: flex;
            justify-content: center;
            align-items: center;
        }

        -----------------------------------------------
        This will create a flex container that centers its items both horizontally and vertically.

---------------------------------------------------------------------------------------------
Different flexbox properties:-
    i. display:-
        * The display property is used to specify the display type of an element.
        * The display property can be set to "flex" to create a flex container.

        Example:-
            .container {
                display: flex;
            }
            ----------------------------------------
            This will create a flex container with the class "container".

    ii. flex-direction:-
        * The flex-direction property is used to specify the direction of the flex items in a flex container.
        * The flex-direction property can be set to "row", "row-reverse", "column", or "column-reverse".

        Example:-
            .container {
                display: flex;
                flex-direction: row;
            }
            ----------------------------------------
            This will create a flex container with the flex items arranged in a row.

    iii. justify-content:-
        * The justify-content property is used to align the flex items along the main axis of the flex container.
        * The justify-content property can be set to "flex-start", "flex-end", "center", "space-between", or "space-around".

        Example:-
            .container {
                display: flex;
                justify-content: center;
            }
            ----------------------------------------
            This will create a flex container that centers its items along the main axis.

    iv. align-items:-
        * The align-items property is used to align the flex items along the cross axis of the flex container.
        * The align-items property can be set to "flex-start", "flex-end", "center", "baseline", or "stretch".

        Example:-
            .container {
                display: flex;
                align-items: center;
            }
            ----------------------------------------
            This will create a flex container that centers its items along the cross axis.

    v. flex-wrap:-
        * The flex-wrap property is used to specify whether the flex items should wrap onto multiple lines.
        * The flex-wrap property can be set to "nowrap", "wrap", or "wrap-reverse".

        Example:-
            .container {
                display: flex;
                flex-wrap: wrap;
            }
            ----------------------------------------
            This will create a flex container that allows its items to wrap onto multiple lines.

    vi. align-self:-
        * The align-self property is used to override the align-items property for a specific flex item.
        * The align-self property can be set to "auto", "flex-start", "flex-end", "center", "baseline", or "stretch".

        Example:-
            .item {
                align-self: center;
            }
            ----------------------------------------
            This will create a flex item that is centered along the cross axis, regardless of the align-items property of the container.

    vii. order:-
        * The order property is used to specify the order of a flex item in a flex container.
        * The order property can be set to any integer value, with lower values appearing first.

        Example:-
            .item {
                order: 2;
            }
            ----------------------------------------
            This will create a flex item with an order of 2, which will appear after items with an order of 1.

    viii. flex-grow:-
        * The flex-grow property is used to specify how much a flex item should grow relative to other items in the same container.
        * The flex-grow property can be set to any positive integer value.

        Example:-
            .item {
                flex-grow: 1;
            }
            ----------------------------------------
            This will create a flex item that grows to fill the available space in the container.

    ix. flex-shrink:-
        * The flex-shrink property is used to specify how much a flex item should shrink relative to other items in the same container.
        * The flex-shrink property can be set to any positive integer value.

        Example:-
            .item {
                flex-shrink: 1;
            }
            ----------------------------------------
            This will create a flex item that shrinks to fit within the container.

    x. flex-basis:-
        * The flex-basis property is used to specify the initial size of a flex item before it grows or shrinks.
        * The flex

        Example:-
            .item {
                flex-basis: 100px;
            }
            ----------------------------------------
            This will create a flex item with an initial size of 100 pixels before it grows or shrinks.

---------------------------------------------------------------------------------------------
CSS measurements:-
    There are two types of measurements in CSS:-
        i. Absolute measurements:-
            * Absolute measurements are fixed units that do not change based on the size of the viewport or the parent element.

            * Examples:-
                i. Q (Quater-Millimeter) :- 1Q = 1/40 of a centimeter.
                ii. mm (Millimeter) :- 1mm = 1/10 of a centimeter.
                iii. cm (Centimeter) :- 1cm = 37.8 px = 25.2/64 in
                iv. in (Inch) :- 1in = 2.54cm or 96px.
                v. pc (Pica) :- 1pc = 1/6 of an inch.
                vi. pt (Point) :- 1pt = 1/72 of an inch.
                vii. px (Pixel) :- 1px = 1/96 of an inch.

        ii. Relative measurements:-
            * Relative measurements are flexible units that change based on the size of the viewport or the parent element.
            * They can be also used for font sizes, margins, and paddings.

            * Examples
                i. percentages (%) :- Percentage value in relation to the parent element.
                ii. ems (em) :- `Font size` of the parent where present.
                iii. rems (rem):- `Font size` of the root element i.e. html.
                iv. exs (ex):- x-co-ordinate or height of the font element.
                v. ch:- Width of the font character.
                vi. lh :- Line height of the font element.
                vii. rlh:- Value computed for line height of the rool element i.e. html.
                viii. vw:- 1% of the viewport width.
                ix. vh:- 1% of the viewport height.
                x. vmin:- 1% of the smallest dimension of viewport.
                xi. vmax:- 1% of the largest dimension of viewport.


---------------------------------------------------------------------------------------------
Use of flexbox:-
    * Flexbox is used to create flexible and responsive layouts that can adapt to different screen sizes and orientations.
    * Flexbox is ideal for creating layouts that require alignment, distribution, and spacing of items.
    * Flexbox is commonly used in web design for creating navigation menus, card layouts, and grid systems.

    Ex:-
        .container {
            display: flex;
            flex-direction: row;
            justify-content: space-between;
            align-items: center;
        }
        ----------------------------------------
        This will create a flex container with the flex items arranged in a row, spaced evenly between them, and centered along the cross axis.

---------------------------------------------------------------------------------------------
Common uses of flexbox:-
    i. Search Bar
    ii. Naviagtion Bar
    iii. Image galary

---------------------------------------------------------------------------------------------
Flex charts:-
    * Flex charts are a type of chart that uses flexbox to create flexible and responsive layouts.
    * Flex charts can be used to create various types of charts, such as bar charts, line charts, and pie charts.
    * Flex charts are commonly used in data visualization and dashboard applications.

    Ex:-
        .chart {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
        }
        --------------------------------------------------
        This will create a flex chart with the chart items arranged in a column, centered along the main axis and cross axis.

---------------------------------------------------------------------------------------------
Flex properties:-
    i. Flex-grow:-
        * The flex-grow property is used to specify how much a flex item should grow relative to other items in the same container.
        * The flex-grow property can be set to any positive integer value.

        Example:-
            .item {
                flex-grow: 1;
            }
            ----------------------------------------
            This will create a flex item that grows to fill the available space in the container.

    ii. Flex-shrink:-
        * The flex-shrink property is used to specify how much a flex item should shrink relative to other items in the same container.
        * The flex-shrink property can be set to any positive integer value.

        Example:-
            .item {
                flex-shrink: 1;
            }
            ----------------------------------------
            This will create a flex item that shrinks to fit within the container.

    iii. Flex-basis:-
        * The flex-basis property is used to specify the initial size of a flex item before it grows or shrinks.
        * The flex-basis property can be set to any length value (px, em, rem, etc.) or percentage.

        Example:-
            .item {
                flex-basis: 100px;
            }
            ----------------------------------------
            This will create a flex item with an initial size of 100 pixels before it grows or shrinks.

---------------------------------------------------------------------------------------------
Flexbox cheat sheet:-
    * Grid properties:-
        i. grid-template-rows: none :- This will organize the elements similar to rows on a table.

        ii. grid-template-columns: none :- This will organize the elements similar to columns on a table.

        iii. grid-template-areas: none :- This will organize the elements similar to a table with rows and columns.

        iv. grid-auto-rows: auto :- This will automatically adjust the height of the rows based on the content.

        v. grid-auto-columns: auto :- This will automatically adjust the width of the columns based on the content.

        vi. grid-auto-flow: row :- This will automatically arrange the elements in a row.

        vii. column-gap: normal:- This will set gap between the columns.

        viii. row-gap: normal:- This will set gap between the rows.

    * Grid properties for container:-
        i. grid-template-columns: measurement units | % units | repeat():-

---------------------------------------------------------------------------------------------
CSS Grid:-
    * CSS Grid is a two-dimensional layout model that allows you to create complex and responsive layouts.
    * CSS Grid is designed to distribute space along both the rows and columns of a grid container.
    * CSS Grid is ideal for creating layouts that require precise control over the placement and sizing of items.

    Ex:-
        .container {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            grid-template-rows: repeat(2, 1fr);
        }
        ----------------------------------------
        This will create a grid container with three columns and two rows, with each column and row taking up an equal amount of space.

---------------------------------------------------------------------------------------------
CSS Selector:-
    i. Attribute selector:-
        * The attribute selector is used to select elements based on their attributes.
        * The attribute selector can be used to select elements with a specific attribute, or elements with a specific attribute value.

        The `index.html` is
        -------------------------------------
            <a href="https://www.example.com" target="_blank">Example</a>

            <a href="https://www.example.com/somewhere" target="_self" class="Example1> Example1</a>

            <a href="https://www.example.com/otherpage" target="_parent" class="Example2"> Example2 </a>

        Ex:-
            i. a[class] {
                    color: red;
                }

                -------------------
                This will select all <a> elements with a class attribute and set their text color to red, i.e. the second and the 3rd Link will be red.

            ii. a[href*="example"] {
                    color: blue;
                }

                -------------------
                This will select all <a> elements with an href attribute that contains the word "example" and set their text color to blue, i.e. all 3 links will be blue.

            iii. a[href="https://www.example.com"] {
                    color: green;
                }

                -------------------
                This will select all <a> elements with an href attribute that is equal to "https://www.example.com" and set their text color to green, i.e. the first link will be green.

    ii. nth-child & nth-of-type selector:-
        * The nth-child & nth-of-type selector is used to select elements based on their position & type in a parent element.

        * Both of these selectors can also be used to select elements based on their index, odd/even position, or a specific pattern.

        The `index.html` is
        -------------------------------------
            <ul>
                <li>Item 1</li>
                <li>Item 2</li>
                <li>Item 3</li>
                <li>Item 4</li>
                <li>Item 5</li>
            </ul>

        Ex:-
            i. li:nth-child(2) {
                    color: red;
                }

                -------------------
                This will select the second <li> element in the list and set its text color to red.

            ii. li:nth-of-type(3) {
                    color: blue;
                }

                -------------------
                This will select the third <li> element of the same type in the list and set its text color to blue.

            iii. li:nth-child(odd) {
                    color: green;
                }

                -------------------
                This will select all odd <li> elements in the list and set their text color to green.

            iv. li:nth-of-type(even) {
                    color: yellow;
                }

                -------------------
                This will select all even <li> elements of the same type in the list and set their text color to yellow.

    iii. Star(*) selector:-
        * The star (*) selector is used to select all elements in a document.
        * The star (*) selector can be used to apply styles to all elements in a document.

        Ex:-
            * {
                color: red;
            }
            -------------------
            This will select all elements in the document and set their text color to red.

---------------------------------------------------------------------------------------------
Specificity:-
    * Specificity is a measure of how specific a CSS selector is.
    * The more specific a selector is, the higher its specificity value.

    * Hierarchy of specificity is as follows:-
        i. Inline styles (style attribute) - 1000
            Ex:- If the same element are defined in the following way:-

            <p style=“color: white;”>
            p{color: blue}
            ------------------------------------
            This will select the <p> element and set its text color to white, as inline styles have the highest specificity.

        ii. IDs - 100
            Ex:-
                #div{
                    color: red;
                }
                -------------------
                This will select the <div> element with the id "div" and set its text color to red.

        iii. Classes, attributes, and pseudo-classes - 10
            Ex:-
                .my-class
                p[“attribute”]
                div:hover
                -------------------
                This will select all elements with the class "class" and set their text color to green.s

        iv. Elements and pseudo-elements - 1

---------------------------------------------------------------------------------------------
Combination Selector:-
    * These are used to select elements based on their relationship with other elements, such as, descendants, children, siblings, or adjacent to other elements.

    Ex:-
        i. Descendant selector:- This is used to select elements that are contained within another selector.

        Ex:-
            This is the index.html file
            -------------------------------------
            <div id="blog">
                <h1> Blog Title </h1>
                <div>
                    <h1> Blog Title 2 </h1>
                    <p> Blog content 1 </p>
                    <p> Blog content 2 </p>
                </div>
            </div>


            This is the css file
            -------------------------------------
            #blog h1 {
                color: red;
            }
            -------------------------------------
            This will select all the <h1> elements under the "blog" div and set their text color to red.

        ii. Child selector:- This is used to select elements that are direct children of another selector.

        Ex:-
            This is the index.html file
            -------------------------------------
            <div id="blog">
                <h1> Blog Title </h1>
                <div>
                    <h1> Blog Title 2 </h1>
                    <p> Blog content 1 </p>
                    <p> Blog content 2 </p>
                </div>
            </div>


            This is the css file
            -------------------------------------
            #blog > h1 {
                color: blue;
            }
            -------------------------------------
            This will select the first <h1> element that is a direct child of the "blog" div and set its text color to blue.

        iii. General sibling selector:- This is used to select elements that are siblings of another selector.

        Ex:-
            This is the index.html file
            -------------------------------------
            <div id="blog">
                <h1> Blog Title </h1>
                <div>
                    <h1> Blog Title 2 </h1>
                    <p> Blog content 1 </p>
                    <p> Blog content 2 </p>
                </div>
            </div>


            This is the css file
            -------------------------------------
            h1 ~ p {
                color: yellow;
            }
            -------------------------------------
            This will target all the <p> elements that are siblings of an <h1> element and set their text color to yellow.

        iv. Adjacent sibling selector:- This is used to select elements that are adjacent siblings of another selector, i.e. only the first sibling.

        Ex:-
            This is the index.html file
            -------------------------------------
            <div id="blog">
                <h1> Blog Title </h1>
                <div>
                    <h1> Blog Title 2 </h1>
                    <p> Blog content 1 </p>
                    <p> Blog content 2 </p>
                </div>
            </div>


            This is the css file
            -------------------------------------
            h1 + p {
                color: green;
            }
            -------------------------------------
            This will select all the <p> elements that are adjacent siblings of an <h1> element and set their text color to green.

---------------------------------------------------------------------------------------------
Pseudo-Classes:-
    * Pseudo-classes are used to select elements based on their state or position in the document.
    * Pseudo-classes can be used to apply styles to elements when they are hovered over, focused, or active.

    Ex:-
        i. hover:- This is used to select elements when they are hovered over by the mouse pointer.

        Ex:-
            This is the index.html file
            ----------------------------------
            <body>
                <h1>Hover over me</h1>
                <button>Click Me</button>

            </body>

            This is the css file
            ----------------------------------
            button:hover {
                color: red;
            }

            .button:active {
                color: blue;
            }
            ----------------------------------
            This will select all <button> elements when they are hovered over and set their text color to red, and when they are clicked, it will set their text color to blue.


        ii. :focus:- This is used to select elements when they are focused or selected by the user.
            Ex:-
                input:focus {
                    border: 2px solid blue;
                }
                -------------------
                This will select all <input> elements when they are focused and set their border color to blue.

        iii. :active:- This is used to select elements when they are active or being clicked.
            Ex:-
                button:active {
                    background-color: green;
                }
                -------------------
                This will select all <button> elements when they are active and set their background color to green.

        iv. :nth-child
            Ex:-
                li:nth-child(2) {
                    color: red;
                }
                -------------------
                This will select the second <li> element in the list and set its text color to red.

        v. :first-child
            Ex:-
                li:first-child {
                    color: blue;
                }
                -------------------
                This will select the first <li> element in the list and set its text color to blue.

---------------------------------------------------------------------------------------------
Form States:-
    * Form states are used to select elements based on their state or position in the document.
    * Form states can be used to apply styles to elements when they are focused, active, or disabled.

    Ex:-
        i. :disabled/enabled:- This is used to select elements that are disabled or enabled.
            Ex:-
                input:disabled {
                    background-color: gray;
                }
                -------------------
                This will select all <input> elements that are disabled and set their background color to gray.

        ii. :checked/indeterminate:- This is used to select elements that are checked or indeterminate.
            Ex:-
                input:checked {
                    background-color: green;
                }
                -------------------
                This will select all <input> elements that are checked and set their background color to green.

        iii. :valid/invalid:- This is used to select elements that are valid or invalid.
            Ex:-
                input:valid {
                    background-color: blue;
                }
                -------------------
                This will select all <input> elements that are valid and set their background color to blue.

---------------------------------------------------------------------------------------------
First-type-of & last-type-of selector:-
    * These are pseudo-class selectors that are used to select elements based on their position in the document.
    * They can be used to select the first or last element of a specific type in a parent element.

    Ex:-
        i. :first-of-type:- This is used to select the first element of a specific type in a parent element.
            Ex:-
                This is the index.html file
                -------------------------------------
                <div id="blog">
                    <h1> Blog Title </h1>
                    <div>
                        <h1> Blog Title 2 </h1>
                        <p> Blog content 1 </p>
                        <p> Blog content 2 </p>
                    </div>
                </div>

                This is the css file
                -------------------------------------
                #blog h1:first-of-type {
                    color: red;
                }

                -------------------------------------
                This will select the first <h1> element in the "blog" div and set its text color to red.

        ii. :last-of-type:- This is used to select the last element of a specific type in a parent element.
            Ex:-
                This is the index.html file
                -------------------------------------
                <div id="blog">
                    <h1> Blog Title </h1>
                    <div>
                        <h1> Blog Title 2 </h1>
                        <p> Blog content 1 </p>
                        <p> Blog content 2 </p>
                    </div>
                </div>

                This is the css file
                -------------------------------------
                #blog h1:last-of-type {
                    color: blue;
                }

                -------------------------------------
                This will select the last <h1> element in the "blog" div and set its text color to blue.

---------------------------------------------------------------------------------------------
Pseudo-Elements:-
    * Pseudo-elements are used to select and style specific parts of an element, such as the first line, first letter, or before/after content.
    * Pseudo-elements can be used to apply styles to specific parts of an element without adding additional HTML markup.

    Ex:-
        i. ::first-letter:- This is used to select the first letter of an element.
            Ex:-
                p::first-letter {
                    font-size: 2em;
                    color: red;
                }
                -------------------
                This will select the first letter of all <p> elements and set its font size to 2em and color to red.

        ii. ::first-line:- This is used to select the first line of an element.
            Ex:-
                p::first-line {
                    font-weight: bold;
                    color: blue;
                }
                -------------------
                This will select the first line of all <p> elements and set its font weight to bold and color to blue.

        iii. ::selection:- This is used to select the text that is currently selected by the user.
            Ex:-
                ::selection {
                    background-color: yellow;
                    color: black;
                }
                -------------------
                This will select the text that is currently selected by the user and set its background color to yellow and text color to black.

        iv. ::marker:- This are generally used to add styles to the elements to a list, such as bullets or numbers.
            Ex:-
                li::marker {
                    color: green;
                    content: "•";
                    font-size: 1.5em;
                }
                -------------------
                This will select the marker of all <li> elements and set its color to green, font size to 1.5em, and content to "•".

        v. ::before / ::after:- This is used to select and style content that is added before or after an element.
            Ex:-
                The index.html file is,

                <body>
                    <p id="para">This is a paragraph.</p>
                    <p> This is another paragraph.</p>
                    <p id="para"> This is a paragraph.</p>
                </body>

                ----------------------
                The css file is,

                #para::before {
                    content: "Before ";
                    color: red;
                }

                #para::after {
                    content: " After";
                    color: blue;
                }

                ----------------------------------------------
                The output will be,

                Before This is a paragraph. After

---------------------------------------------------------------------------------------------
LVHA:- The `LVHA` is the order of the CSS selectors, i.e. the order of the CSS selectors is as follows:-
    i. LVHA
        * L - Link
        * V - Visited
        * H - Hover
        * A - Active

    Ex:-
        a:link {
            color: blue;
        }

        a:visited {
            color: purple;
        }

        a:hover {
            color: red;
        }

        a:active {
            color: green;
        }

---------------------------------------------------------------------------------------------
Selector cheat sheet
    i. Simple Selectors
        * Element selector (element)
        * Class selector (.class)
        * ID selector (#id)
        * Universal selector (*)

    Ex:-
        index.html

        <div class="container">
            <h1>Title</h1>
            <p>Paragraph</p>
            <a href="#">Link</a>
        </div>

        ----------------------------------------------------
        i. Element selector:- This is used to select elements based on their type.
            Ex:-
            div {
                background-color: red;
            }
            ----------------------------------------
            This will select all <div> elements and set their background color to red.

        ii. Class selector:- This is used to select elements based on their class.
            Ex:-
            .container {
                background-color: blue;
            }
            ----------------------------------------
            This will select all elements with the class "container" and set their background color to blue.

        iii. ID selector:- This is used to select elements based on their ID.
            Ex:-
            #title {
                color: green;
            }
            ----------------------------------------
            This will select the <h1> element with the id "title" and set its text color to green.

        iv. Universal selector:- This is used to select all elements in a document.
            Ex:-
            * {
                color: yellow;
            }
            ----------------------------------------
            This will select all elements in the document and set their text color to yellow.

    ii. Variation of simple selectors:-
        * Two Classes (.class1.class2)
        * Element and Class (element.class)
        * Two elements (element1, element2)

        i. Two Classes:- This is used to select elements based on two classes.
            Ex:-
            .container .title {
                color: red;
            }
            ----------------------------------------
            This will select all elements with the class "title" that are contained within an element with the class "container" and set their text color to red.

        ii. Element and Class:- This is used to select elements based on their type and class.
            Ex:-
            div.container {
                background-color: blue;
            }
            ----------------------------------------
            This will select all <div> elements with the class "container" and set their background color to blue.

        iii. Two elements:- This is used to select two elements based on their type.
            Ex:-
            div, p {
                color: green;
            }
            ----------------------------------------
            This will select all <div> and <p> elements and set their text color to green.

    iii. Descendant selectors/combinators:-
        * Descendant (element element)
        * Child (element > element)
        * Adjacent sibling (element + element)
        * General sibling (element ~ element)

        i. Descendant:- This is used to select elements that are contained within another selector.
            Ex:-
            .container h1 {
                color: red;
            }
            ----------------------------------------
            This will select all <h1> elements that are contained within an element with the class "container" and set their text color to red.

        ii. Child:- This is used to select elements that are direct children of another selector.
            Ex:-
            .container > h1 {
                color: blue;
            }
            ----------------------------------------
            This will select all <h1> elements that are direct children of an element with the class "container" and set their text color to blue.

        iii. Adjacent sibling:- This is used to select elements that are adjacent siblings of another selector.
            Ex:-
            h1 + p {
                color: green;
            }
            ----------------------------------------
            This will select all <p> elements that are adjacent siblings of an <h1> element and set their text color to green.

        iv. General sibling:- This is used to select elements that are siblings of another selector.
            Ex:-
            h1 ~ p {
                color: yellow;
            }
            ----------------------------------------
            This will select all <p> elements that are siblings of an <h1> element and set their text color to yellow.

    iv. Attribute selectors:-
        * Attribute ([href] {} )
        * Attribute with value ([href="value"] {})
        * Attribute with partial value ([href*="value"] {} )
        * Attribute with partial value at the start ([href^="value"] {})
        * Attribute with partial value at the end ([href$="value"] {} )
        * Attribute with partial value at the start and end ([href^="value"][href$="value"] {} )
        * Attribute with whitespace value ([href~="value"] {} )

---------------------------------------------------------------------------------------------
CSS Effect:-
    * CSS effects are used to create visual effects on elements, such as transitions, animations, and transformations.
    * CSS effects can be used to create dynamic and interactive user interfaces.

    Ex:-
        i. Transition:- This is used to create smooth transitions between different states of an element.
            Ex:-
                .box {
                    width: 100px;
                    height: 100px;
                    background-color: red;
                    transition: background-color 0.5s ease;
                }

                .box:hover {
                    background-color: blue;
                }
                ----------------------------------------
                This will create a smooth transition between the red and blue background colors when the <div> element is hovered over.

        ii. Animation:- This is used to create complex animations using keyframes.
            Ex:-
                @keyframes slide {
                    from {
                        transform: translateX(0);
                    }
                    to {
                        transform: translateX(100px);
                    }
                }

                .box {
                    width: 100px;
                    height: 100px;
                    background-color: red;
                    animation: slide 1s ease-in-out infinite alternate;
                }
                ----------------------------------------
                This will create a sliding animation that moves the <div> element from its original position to 100 pixels to the right and back.

        iii. Transformation:- This is used to apply transformations to elements, such as scaling, rotating, or skewing.
            Ex:-
                .box {
                    width: 100px;
                    height: 100px;
                    background-color: red;
                    transform: rotate(45deg);
                }

---------------------------------------------------------------------------------------------
Text Effect:-
    * Text effects are used to create visual effects on text elements, such as shadows, gradients, and text decorations.
    * Text effects can be used to create dynamic and interactive user interfaces.

    * Main properties of the text contents are:-
        i. text-transform:-
            * This is used to control the capitalization of text.
            * The text-transform property can be set to uppercase, lowercase, capitalize, or none.

            Ex:-
                p {
                    text-transform: uppercase;
                }
                ----------------------------------------
                This will set all <p> elements to uppercase.

        ii. text-decoration:-
            * This is used to add decorations to text, such as underline, overline, or line-through.
            * The text-decoration property can be set to underline, overline, line-through, or none.

            Ex:-
                p {
                    text-decoration: underline;
                }
                ----------------------------------------
                This will set all <p> elements to have an underline.

        iii. font-style:-
            * This is used to set the style of the font, such as normal, italic, or oblique.
            * The font-style property can be set to normal, italic, or oblique.

            Ex:-
                p {
                    font-style: italic;
                }
                ----------------------------------------
                This will set all <p> elements to italic.

        iv. font-weight:-
            * This is used to set the weight of the font, such as normal, bold, or bolder.
            * The font-weight property can be set to normal, bold, bolder, or lighter.

            Ex:-
                p {
                    font-weight: bold;
                }
                ----------------------------------------
                This will set all <p> elements to bold.

---------------------------------------------------------------------------------------------
Tranform & Transition:-
    * Transform and transition are two CSS properties that are used to create visual effects on elements.
    * Transform is used to apply transformations to elements, such as scaling, rotating, or skewing.
    * Transition is used to create smooth transitions between different states of an element.

    Ex:-
        i. Transform:- This is used to apply transformations to elements, such as scaling, rotating, or skewing.
            Ex:-
                .box {
                    width: 100px;
                    height: 100px;
                    background-color: red;
                    transform: rotate(45deg);
                }
                ----------------------------------------
                This will rotate the <div> element by 45 degrees.

        ii. Transition:- This is used to create smooth transitions between different states of an element.
            Ex:-
                .box {
                    width: 100px;
                    height: 100px;
                    background-color: red;
                    transition: background-color 0.5s ease;
                }

                .box:hover {
                    background-color: blue;
                }
                ----------------------------------------
                This will create a smooth transition between the red and blue background colors when the <div> element is hovered over.

---------------------------------------------------------------------------------------------
CSS Animation:-
    * CSS animation is a way to create animations using CSS properties and keyframes.
    * CSS animation allows you to create complex animations without using JavaScript or images.
    * It consists of mainly two parts: the animation property and the keyframes.
        * The animation property is used to specify the name of the animation, the duration, the timing function, and other properties.
        * The keyframes are used to define the different states of the animation.

    * The animation property can be set to a specific name, duration, timing function, and other properties.
    * The keyframes are used to define the different states of the animation.
    * The default timing function is "ease", which creates a smooth transition between the different states of the animation.

   Ex:-
        index.html
        -----------------------------------------------------
        <html>
            <body>
                <div class="box"></div>
            </body>
        </html>

        styles.css
        -----------------------------------------------------
        body{
            padding: 30px;
        }

        .box{
            background-color: lightcoral;
            width: 50px;
            height: 50px;
            animation: myanimation 3s infinite ease-in;
        }

        @keyframes myanimation {
            from {
                width: 50px;
            }

            to {
                width: 200px;
            }
        }

        -----------------------------------------------------
        This will create an animation that changes the width of the <div> element from 50 pixels to 200 pixels over a duration of 3 seconds.

        **** The above CSS frames code can be also written like this ****
        @keyframes myanimation {
            0%  {
                    width: 50px;
                }

            100%{
                    width: 200px;
                }
        }

---------------------------------------------------------------------------------------------
Animations & Effects:-
    Different tranform properties are:-
        i. keyword-value type:none
            * This is used to set the transform property to none.

            Ex:-
                .box {
                    transform: none;
                }
                ----------------------------------------
                This will set the transform property of the <div> element to none.

        ii. keyword-value type:all
            * This is used to set the transform property to all.

            Ex:-
                .box {
                    transform: all;
                }
                ----------------------------------------
                This will set the transform property of the <div> element to all.

        iii. function-value type:translate
            * This is used to set the transform property to translate.
            * Different variations are:-
                * translate()
                * translateX()
                * translateY()
                * translateZ()
                * translate3d(x, y, z)

            Ex:-
                .box {
                    transform: translate(50px, 50px);
                }
                ----------------------------------------
                This will set the transform property of the <div> element to translate it by 50 pixels in both the x and y directions.

        iv. function-value: matrix()
            * This is used to set the transform property to matrix.
            * The matrix() function takes six parameters: a, b, c, d, e, and f.
            * The matrix() function is used to create a 2D transformation matrix that can be used to transform an element in 2D space.5

            Ex:-
                .box {
                    transform: matrix(1, 0, 0, 1, 50px, 50px);
                }
                ----------------------------------------
                This will set the transform property of the <div> element to a matrix transformation that translates it by 50 pixels in both the x and y directions.

        v. function-value type: rotate
            * This is used to set the transform property to rotate.
            * Different variations are:-
                * rotate()
                * rotateX()
                * rotateY()
                * rotateZ()
                * rotate3d(x, y, z)

            Ex:-
                .box {
                    transform: rotate(45deg);
                }
                ----------------------------------------
                This will set the transform property of the <div> element to rotate it by 45 degrees.

        vi. function-value type: scale
            * This is used to set the transform property to scale.
            * Different variations are:-
                * scale()
                * scaleX()
                * scaleY()
                * scaleZ()
                * scale3d(x, y, z)

            Ex:-
                .box {
                    transform: scale(2);
                }
                ----------------------------------------
                This will set the transform property of the <div> element to scale it by a factor of 2 in both the x and y directions.

        vii. function-value type: skew
            * This is used to set the transform property to skew.
            * Different variations are:-
                * skew()
                * skewX()
                * skewY()

            Ex:-
                .box {
                    transform: skew(20deg, 20deg);
                }
                ----------------------------------------
                This will set the transform property of the <div> element to skew it by 20 degrees in both the x and y directions.

---------------------------------------------------------------------------------------------
Preprocessros:- SASS, SCSS, Stylus
    * Preprocessors are tools that allow you to write CSS in a more efficient and organized way.
    * This is same as #define in C/C++.
    * They provide features such as variables, nesting, mixins, and functions that make it easier to write and maintain CSS code.

    i. SASS (Syntactically Awesome Style Sheets):-
        * This is a CSS preprocessor that allows you to write CSS in a more efficient and organized way.
        * It provides features such as variables, nesting, mixins, and functions that make it easier to write and maintain CSS code.
        * It uses indentation instead of curly braces and semicolons, which makes it more readable.

        Ex:-
            $primary-color: blue

            .container
                background-color: $primary-color

    ii. SCSS (Sassy CSS):-
        * This is a syntax of SASS that uses curly braces and semicolons, similar to CSS.
        * It allows you to write CSS in a more efficient and organized way.

        Ex:-
            $primary-color: blue;

            .container {
                background-color: $primary-color;
            }

    iii. Stylus:-
        * This is another CSS preprocessor that allows you to write CSS in a more efficient and organized way.
        * It provides features such as variables, nesting, mixins, and functions that make it easier to write and maintain CSS code.

        Ex:-
            primary-color = blue

            .container
                background-color primary-color

---------------------------------------------------------------------------------------------
Webkit:-
    * Webkit is a browser engine used by Safari and other browsers.
    * It provides a set of CSS properties and features that are specific to Webkit-based browsers.
    * Webkit properties are prefixed with -webkit- to indicate that they are specific to Webkit-based browsers.

    Ex:-
        .box {
            -webkit-transition: background-color 0.5s ease;
            transition: background-color 0.5s ease;
        }
        ----------------------------------------
        This will create a smooth transition between the red and blue background colors when the <div> element is hovered over in Webkit-based browsers.

---------------------------------------------------------------------------------------------
