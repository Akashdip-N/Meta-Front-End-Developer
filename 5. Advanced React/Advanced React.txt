---------------------------------------------------------------------------------------------

                            Advanced React notes

---------------------------------------------------------------------------------------------
***************************************************************************************

                                    Week 1

***************************************************************************************
---------------------------------------------------------------------------------------------
map() method:-
    * This method creates a new array populated with the results of calling a provided function on every element in the calling array.

    Ex:-
        const data = [
            { id: 1, name: "John" },
            { id: 2, name: "Jane" },
            { id: 3, name: "Doe" }
        ];
        const names = data.map(item => {
            return item.name;
        });
        console.log(names);
        ----------------------------------------
        The output will be:
        ["John", "Jane", "Doe"]

---------------------------------------------------------------------------------------------
Keys
    * Keys are used to identify which items have changed, are added, or are removed.
   * This is important for performance reasons, as it helps React optimize rendering.

   Ex:-
        const data = [
            { id: 1, name: "John" },
            { id: 3, name: "Doe" }
            { id: 2, name: "Jane" },
        ];

        const listItems = data.map(item => {
            return <li key={item.id}>{item.name}</li>;
        });

        console.log(listItems);
        ----------------------------------------
        The output will be:
        <li key="1">John</li>
        <li key="3">Doe</li>
        <li key="2">Jane</li>

    Explanation:-
        Since, the id is unique for each of items, we can use it as a key.

---------------------------------------------------------------------------------------------
Diffing algorithm:-
    * React uses a diffing algorithm to compare the new virtual DOM with the previous one.
    * It identifies what has changed and updates only those parts of the real DOM.
    * This process is efficient and helps in optimizing performance.

---------------------------------------------------------------------------------------------
Controlled componenets:-
    * These are the set of components which offers a declarative application programming interface (API).
    * `Value` prop is used to set the value of the input field.
    * `onChange` prop is used to handle the change event.
    * `onSubmit` prop is used to handle the submit event.

    Ex:-
        class ControlledComponent extends React.Component {
            constructor(props) {
                super(props);
                this.state = { value: '' };
            }

            handleChange = (event) => {
                this.setState({ value: event.target.value });
            }

            handleSubmit = (event) => {
                alert('A name was submitted: ' + this.state.value);
                event.preventDefault();
            }

            render() {
                return (
                    <form onSubmit={this.handleSubmit}>
                        <label>
                            Name:
                            <input type="text" value={this.state.value} onChange={this.handleChange} />
                        </label>
                        <input type="submit" value="Submit" />
                    </form>
                );
            }
        }

---------------------------------------------------------------------------------------------
Controlled components vs Uncontrolled components:-

i. Uncontrolled components:-
    * These are the components which do not offer a declarative application programming interface (API).
    * `defaultValue` prop is used to set the default value of the input field.
    * `ref` prop is used to get the value of the input field.

    Ex:-
        const Form = () => {
            const inputRef = useRef(null);
            const handleSubmit = () => {
            const inputValue = inputRef.current.value;
            // Do something with the value
        }

        return (
                <form onSubmit={handleSubmit}>
                    <input ref={inputRef} type="text" />
                </form>
            );
        };
    --------------------------------------------------------
    With this code we can get the value of the input field using the `ref` prop.

ii. Controlled components:-
    * This accepts the value as a prop and a callback to change the state.

    Ex:-
        const Form = () => {
            const [value, setValue] = useState("");

            const handleChange = (e) => {
            setValue(e.target.value)
        }

        return (
                <form>
                    <input
                        value={value}
                        onChange={handleChange}
                        type="text"
                    />
                </form>
            );
        };
    --------------------------------------------------------
    Explanation:-
        * First the code starts with an empty string "".
        * When the user types and then the `handleChange` function is called, which updates the state with the new value with the `setValue` function.

---------------------------------------------------------------------------------------------
Forms using react:-
    * Forms are used to collect user input.
    * React provides a way to handle forms using controlled components and uncontrolled components.
    *

---------------------------------------------------------------------------------------------
preventDefault():-
    * This method is used to prevent the default behavior of an event.
    * For example, when a form is submitted, the default behavior is to refresh the page.
    * By using `preventDefault()`, we can prevent this behavior and handle the form submission using JavaScript.

    Ex:-
        const handleSubmit = (event) => {
            event.preventDefault();
            // Handle form submission
        }

        return (
            <form onSubmit={handleSubmit}>
                <input type="text" />
                <button type="submit">Submit</button>
            </form>
        );

---------------------------------------------------------------------------------------------
onFocus():-
    * This event is triggered when an element gains focus.
    * It can be used to perform actions when an input field is focused.

    Ex:-
        const handleFocus = () => {
            console.log("Input field is focused");
        }

        return (
            <input type="text" onFocus={handleFocus} />
        );

---------------------------------------------------------------------------------------------
onBlur():-
    * This event is triggered when an element loses focus.
    * It can be used to perform actions when an input field is blurred.
    * This is used to determine when an input has been interacted with at least once.

    Ex:-
        const handleBlur = () => {
            console.log("Input field is blurred");
        }

        return (
            <input type="text" onBlur={handleBlur} />
        );

---------------------------------------------------------------------------------------------
onChange():-
    * This event is triggered when the value of an input field changes.
    * It can be used to perform actions when the value of an input field changes.

    Ex:-
        const handleChange = (event) => {
            console.log(event.target.value);
        }

        return (
            <input type="text" onChange={handleChange} />
        );

---------------------------------------------------------------------------------------------
state:-
    * State is an object that represents the current state of a component.
    * It is used to store data that can change over time.
    * State is mutable and can be changed using the `setState()` method.
    * This is an optional parameter.

---------------------------------------------------------------------------------------------
Props:-
    * Props are used to pass data from one component to another.
    * They are immutable and cannot be changed by the child component.
    * Props are passed as attributes in the JSX.

---------------------------------------------------------------------------------------------
Context:-
    * Context is used to pass data through the component tree without having to pass props down manually at every level.
    * It is used to share data that can be considered "global" for a tree of React components.

    Ex:-
        import React, { useState, useContext } from 'react';
        const MyContext = React.createContext();

        const MyProvider = (props) => {
            const [value, setValue] = useState("Hello World");

            return (
                <MyContext.Provider value={{ value, setValue }}>
                    {props.children}
                </MyContext.Provider>
            );
        }

        const MyComponent = () => {
            const { value } = useContext(MyContext);
            return <div>{value}</div>;
        }
        --------------------------------------------------------
        Explanation:-
            Here the `MyContext` is the context object, which is created using the `createContext()` method and is used to create a context provider.

---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
***************************************************************************************

                                    Week 2

***************************************************************************************
---------------------------------------------------------------------------------------------
